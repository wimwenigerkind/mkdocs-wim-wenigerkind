{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":""},{"location":"#wim-wenigerkind","title":"Wim Wenigerkind","text":""},{"location":"#about-me","title":"About Me","text":"<p>Hi, my name is Wim. I\u2019m 16 years old and a passionate developer from Germany. I started coding when I was just 9 years old, and it has been an incredible journey ever since. Exploring new technologies and building creative solutions brings me immense joy. I\u2019m always eager to learn, grow, and push the boundaries of my skills. Welcome to my coding world!</p>"},{"location":"#projects","title":"Projects","text":"<ul> <li>Docker Hub: My Docker Hub repository with various Docker images.</li> <li>GamePanel Comming Soon: A docker based game server management panel for Minecraft and other games.</li> <li>Docker Compose Helper: A helper script to run Docker Compose scripts with ease.</li> </ul>"},{"location":"#contact","title":"Contact","text":"<ul> <li>Email: info@wimwenigerkind.com</li> <li>Email: info@wimdevgroup.com</li> </ul>"},{"location":"#socials","title":"Socials","text":"<ul> <li> GitHub</li> <li> Docker Hub</li> <li> Discord</li> <li> YouTube</li> <li> Wim Wenigerkind</li> <li> WimDevGroup</li> </ul>"},{"location":"git/","title":"Git","text":""},{"location":"git/#grundbefehle-in-git","title":"Grundbefehle in Git","text":"<ol> <li> <p><code>git init</code>    Initialisiert ein neues Git-Repository in dem aktuellen Verzeichnis. Damit wird der Ordner f\u00fcr die Versionskontrolle vorbereitet.</p> </li> <li> <p><code>git clone [URL]</code>    Klont ein bestehendes Repository von einer URL (z.B. GitHub) auf den lokalen Computer.</p> </li> <li> <p><code>git status</code>    Zeigt den aktuellen Status des Repositories an, inklusive \u00c4nderungen, die zum Commit anstehen.</p> </li> <li> <p><code>git add [Datei]</code>    F\u00fcgt eine Datei zur Staging-Area hinzu, um sie f\u00fcr den n\u00e4chsten Commit vorzubereiten.</p> </li> <li> <p><code>git commit -m \"Nachricht\"</code>    Speichert die \u00c4nderungen in der Staging-Area als neuen Commit mit einer Beschreibung.</p> </li> <li> <p><code>git push</code>    \u00dcbertr\u00e4gt die lokalen Commits zum entfernten Repository, z.B. auf GitHub.</p> </li> <li> <p><code>git pull</code>    Holt die neuesten \u00c4nderungen vom entfernten Repository und integriert sie in das aktuelle lokale Verzeichnis.</p> </li> <li> <p><code>git fetch</code>    L\u00e4dt die neuesten \u00c4nderungen vom entfernten Repository herunter, ohne sie zu integrieren.</p> </li> <li> <p><code>git merge [Branch-Name]</code>    Integriert die \u00c4nderungen eines anderen Branches in den aktuellen Branch.</p> </li> <li> <p><code>git branch</code>     Listet alle lokalen Branches auf und zeigt den aktuellen Branch an.</p> </li> <li> <p><code>git checkout [Branch-Name]</code>     Wechselt zu einem anderen Branch oder stellt einen \u00e4lteren Commit wieder her.</p> </li> <li> <p><code>git log</code>     Zeigt den Verlauf der Commits an, inklusive Nachrichten, Autoren und Zeitstempel.</p> </li> <li> <p><code>git reset [Datei]</code>     Entfernt eine Datei aus der Staging-Area, ohne die Datei selbst zu \u00e4ndern.</p> </li> <li> <p><code>git rm [Datei]</code>     Entfernt eine Datei aus dem Arbeitsverzeichnis und markiert die L\u00f6schung f\u00fcr den n\u00e4chsten Commit.</p> </li> <li> <p><code>git stash</code>     Speichert ungespeicherte \u00c4nderungen tempor\u00e4r, um an etwas anderem zu arbeiten, ohne sie zu committen.</p> </li> <li> <p><code>git rebase [Branch-Name]</code>     Wendet Commits eines Branches auf die Spitze eines anderen Branches an und sorgt so f\u00fcr eine lineare Historie.</p> </li> <li> <p><code>git remote -v</code>     Zeigt die verbundenen entfernten Repositories an und deren URLs.</p> </li> <li> <p><code>git diff</code>     Zeigt die Unterschiede zwischen Arbeitsverzeichnis, Staging-Area und den letzten Commits an.</p> </li> <li> <p><code>git tag [Tag-Name]</code>     Markiert einen bestimmten Punkt in der Commit-Historie, meist f\u00fcr Versionsver\u00f6ffentlichungen.</p> </li> <li> <p><code>git config</code>     Konfiguriert Benutzereinstellungen f\u00fcr Git, z.B. Name und E-Mail-Adresse.</p> </li> </ol>"},{"location":"git/#secrets-aus-githistory-entfernen","title":"Secrets aus GitHistory entfernen","text":"<p>Wenn Sie versehentlich ein Geheimnis, wie z.B. ein Passwort oder einen API-Schl\u00fcssel, in einem Git-Repository committet haben, k\u00f6nnen Sie es mit den folgenden Schritten aus der Git-Historie entfernen:</p>"},{"location":"git/#git-filter-repo-tool-installieren","title":"Git Filter-Repo Tool Installieren","text":"<p>Secrets aus der Git History entfernen kann man mit dem git-filter-repo tool:</p> <p>Installieren Sie das <code>git-filter-repo</code>-Tool:</p> MacOS mit Brew<pre><code>brew install git-filter-repo\n</code></pre> <p>Dadurch wird das Tool und die ben\u00f6tigten Abh\u00e4ngigkeiten installiert.</p>"},{"location":"git/#secret-entfernen","title":"Secret entfernen","text":"<pre><code>git filter-repo --replace-text &lt;(echo '&lt;DEIN_SECRET&gt;') --force\n</code></pre> <p>Ersetzen Sie <code>&lt;DEIN_SECRET&gt;</code> durch das secret das Sie entfernen m\u00f6chten.</p> <p>Danach m\u00fcssen die \u00c4nderungen noch force gepusht werden.</p>"},{"location":"mkdocs/","title":"Install MkDocs-Material Linux","text":""},{"location":"mkdocs/#install-mkdocs","title":"Install MkDocs","text":""},{"location":"mkdocs/#install-advanced-packaging-tools","title":"Install Advanced Packaging Tools","text":"<pre><code>sudo apt update &amp;&amp; apt upgrade -y\n</code></pre>"},{"location":"mkdocs/#install-python-and-mkdocs","title":"Install Python and Mkdocs","text":"<pre><code>sudo apt install python3-pip\nsudo apt install mkdocs\n</code></pre>"},{"location":"mkdocs/#install-mkdocs-material","title":"Install MkDocs-Material","text":"<pre><code>pip install mkdocs-material\n</code></pre>"},{"location":"mkdocs/#create-first-site","title":"Create first Site","text":"<pre><code>mkdocs new SITE_NAME\n</code></pre>"},{"location":"mkdocs/#configure-mkdocs-to-use-mkdocs-material","title":"Configure Mkdocs to use MkDocs-Material","text":"<pre><code>cd SITE_NAME\nnano mkdocs.yml\n</code></pre> <p>mkdocs.yml <pre><code>site_name: Docs\ntheme:\n    name: material\n</code></pre></p>"},{"location":"mkdocs/#start-mkdocs","title":"Start Mkdocs","text":"<pre><code>mkdocs serve\n</code></pre> <p>Start with individual IP</p> <pre><code>mkdocs serve -a 0.0.0.0:8000\n</code></pre> <p>Access the Site via IP and port 8000</p>"},{"location":"mkdocs/#mkdocs-material","title":"Mkdocs-Material","text":""},{"location":"neue-seite/","title":"Neue seite","text":"<ul> <li>Home: index.md</li> <li>Dokumentation:<ul> <li>Unterseite: dokumentation/under.md</li> </ul> </li> </ul>"},{"location":"openssh-server/","title":"OpenSSH-Server","text":"<p>Install OpenSSH-Server on Linux with root password access.</p>"},{"location":"openssh-server/#install-openssh-server","title":"Install OpenSSH-Server","text":"<pre><code>sudo apt update &amp;&amp; apt upgrade -y\nsudo apt install openssh-server\n</code></pre>"},{"location":"openssh-server/#configure-the-ssh-config-to-allow-root-password-access","title":"Configure the SSH config to allow root password access","text":"<pre><code>nano /etc/ssh/sshd_config\n</code></pre> <p>Change PermitRootLogin to yes</p> <pre><code>PermitRootLogin yes\n</code></pre> <p>Restart the SSH service</p> <pre><code>service ssh restart\n</code></pre>"},{"location":"pihole/","title":"piHole","text":""},{"location":"pihole/#debian-lxc-container-proxmox","title":"Debian LXC container Proxmox","text":"<ul> <li>Debian lxc container in Proxmox 1 CPU and 0.512GB ram</li> </ul>"},{"location":"pihole/#install-pihole-on-debian","title":"Install piHole on Debian","text":"<p><pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\n</code></pre> <pre><code>sudo wget -O basic-install.sh https://install.pi-hole.net\nsudo bash basic-install.sh\n</code></pre></p>"},{"location":"pihole/#setup","title":"Setup","text":"<p>Follow the instructions in the vnc.</p>"},{"location":"pihole/#change-password","title":"Change password","text":"<pre><code>pihole -a -p\n</code></pre>"},{"location":"proxmox/","title":"Proxmox","text":""},{"location":"proxmox/#installation","title":"Installation","text":"<ul> <li>Downloand der ISO datei Proxmox ISO</li> <li>ISO auf USB Stick flashen mit Rufus f\u00fcr Windows oder Balena Etcher f\u00fcr Mac</li> <li>Von dem USB Stick Proxmox booten und Installations Assistant folgen.</li> </ul>"},{"location":"under/","title":"Under","text":"<ul> <li>Home: index.md</li> <li>\u00dcber uns: about.md</li> <li>Neue Seite: neue_seite.md  # Hinzugef\u00fcgte Seite</li> </ul>"},{"location":"bitbucket-pipelines/docker-multi-arch-pipeline/","title":"Multi Arch Docker Image Pipeline","text":"<p>Mit dieser Bitbucket Pipeline kannst du Multi Architektur Docker Images Bauen und im Docker Hub ver\u00f6ffentlichen sowie bei Fehlern und Erfolg Discord Webhook Nachrichten senden. Die Pipeline verwendet die Container Structure Tests, um die Docker Images zu testen. Die Tests werden in einem JUnit-Format ausgegeben und k\u00f6nnen in Bitbucket Pipelines angezeigt werden.</p> <p>F\u00fcr die Pipeline verwende ich mein eigenes Docker Image, welches auch \u00fcber diese Pipeline gebaut wird. Das Docker Image ist auf Docker Hub verf\u00fcgbar und kann in der Pipeline verwendet werden. wimdevgroup/docker-buildx-pipeline:latest</p> <p>Die Pipeline ben\u00f6tigt einen Bitbucket Runner, um die Images zu bauen da Bitbucket das bauen von multi architektur Images nicht unterst\u00fctzt. Daher wird der bau prozess auf einen eigenen Runner/Server ausgelagert.</p> <p>Die verwendung vom Discord Webhook ist optional und kann entfernt werden. Die Pipeline ohne Discord Webhook werde ich auch zur verf\u00fcgung stellen.</p>"},{"location":"bitbucket-pipelines/docker-multi-arch-pipeline/#voraussetzungen","title":"Voraussetzungen","text":"<ul> <li>Docker Hub Account</li> <li>Bitbucket</li> <li>Self Hosted Bitbucket Runner</li> <li>Ein System mit Docker und Docker Buildx auf dem der Bitbucket Runner l\u00e4uft</li> <li>Discord Webhook URL</li> </ul>"},{"location":"bitbucket-pipelines/docker-multi-arch-pipeline/#schritte","title":"Schritte","text":""},{"location":"bitbucket-pipelines/docker-multi-arch-pipeline/#1-repositroy-forken","title":"1. Repositroy Forken","text":"<p>Forke Repository</p>"},{"location":"bitbucket-pipelines/docker-multi-arch-pipeline/#2-server-einrichten","title":"2. Server einrichten","text":"<p>Docker und Docker Buildx auf dem Server installieren sowie auch den Bitbucket Runner einrichten.</p>"},{"location":"bitbucket-pipelines/docker-multi-arch-pipeline/#3-repository-vorbereiten","title":"3. Repository vorbereiten","text":"<p>Repository Variablen setzten</p> <p>Docker Hub Username und Passwort</p> <pre><code>DOCKERHUB_USERNAME=your-dockerhub-username\nDOCKERHUB_PASSWORD=your-dockerhub-password\n</code></pre> <p>SSH Server, User, Passwort und Pfad</p> <pre><code>SSH_USER=your-ssh-user\nSSH_PASSWORD=your-ssh-password\nSSH_HOST=your-ssh-host\nSSH_PATH=your-ssh-path\n</code></pre> <p>Discord Webhook URL</p> <pre><code>DISCORD_WEBHOOK_URL=your-discord-webhook-url\n</code></pre>"},{"location":"bitbucket-pipelines/docker-multi-arch-pipeline/#ordnerstruktur-des-repositorys","title":"Ordnerstruktur des Repositorys","text":"<pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 bitbucket-pipelines.yml\n\u251c\u2500\u2500 build.sh\n\u251c\u2500\u2500 container\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 &lt;IMAGE-NAME&gt;\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 .Dockerfile\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 .&lt;TAG&gt;.env\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 .version\n\u251c\u2500\u2500 container-structure-test-junit-compat.xsl\n\u2514\u2500\u2500 notification.sh\n</code></pre>"},{"location":"bitbucket-pipelines/docker-multi-arch-pipeline/#bitucket-pipeline","title":"Bitucket Pipeline","text":"bitbucket-pipelines.yml<pre><code>image: wimdevgroup/docker-buildx-pipeline:latest\n\ndefinitions:\n    strings:\n        cst-install: &amp;cst-install |\n            curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64;\n            chmod +x container-structure-test-linux-amd64;\n            mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test;\n            export PATH=$PATH:/usr/local/bin/\n    steps:\n        - step: &amp;build-step\n              after-script:\n                  - |\n                      for report in $(find . -type f -name 'report*.xml'); do\n                        xsltproc --output \"${report}.tmp\" container-structure-test-junit-compat.xsl \"${report}\";\n                        mv \"${report}.tmp\" \"${report}\";\n                      done\n                      if [[ BITBUCKET_EXIT_CODE -eq 0 ]]; then\n                        DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL} BITBUCKET_WORKSPACE=${BITBUCKET_WORKSPACE} BITBUCKET_REPO_FULL_NAME=${BITBUCKET_REPO_FULL_NAME} CONTAINER=${container} BITBUCKET_PIPELINE_UUID=${BITBUCKET_PIPELINE_UUID} PIPELINE_STATE=1 ./notification.sh\n                      else\n                        DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL} BITBUCKET_WORKSPACE=${BITBUCKET_WORKSPACE} BITBUCKET_REPO_FULL_NAME=${BITBUCKET_REPO_FULL_NAME} CONTAINER=${container} BITBUCKET_PIPELINE_UUID=${BITBUCKET_PIPELINE_UUID} PIPELINE_STATE=2 ./notification.sh\n                      fi\n\npipelines:\n    tags:\n        release/*:\n            - step:\n                  &lt;&lt;: *build-step\n                  name: Build and publish docker\n                  runs-on:\n                      - 'self.hosted'\n                      - 'workspace'\n                  deployment: production\n                  script:\n                      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL} BITBUCKET_WORKSPACE=${BITBUCKET_WORKSPACE} BITBUCKET_REPO_FULL_NAME=${BITBUCKET_REPO_FULL_NAME} CONTAINER=${container} BITBUCKET_PIPELINE_UUID=${BITBUCKET_PIPELINE_UUID} PIPELINE_STATE=0 ./notification.sh\n                      - *cst-install\n                      - export SSH_KNOWN_HOSTS=$(ssh-keyscan -H ${SSH_HOST})\n                      - mkdir -p ~/.ssh\n                      - echo \"$SSH_KNOWN_HOSTS\" &gt;&gt; ~/.ssh/known_hosts\n                      - ping -c 3 ${SSH_HOST}\n                      - sshpass -p \"${SSH_PASSWORD}\" rsync -avz --progress build.sh container-structure-test-junit-compat.xsl \"${SSH_USER}@${SSH_HOST}:pipeline/\"\n                      - sshpass -p ${SSH_PASSWORD} rsync -avz --progress container/ \"${SSH_USER}@${SSH_HOST}:pipeline/container/\"\n                      - sshpass -p ${SSH_PASSWORD} ssh ${SSH_USER}@${SSH_HOST} \"cd ${SSH_PATH} &amp;&amp; DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME} DOCKERHUB_PASSWORD=${DOCKERHUB_PASSWORD} ./build.sh ${container} --push\"\n                      - sshpass -p ${SSH_PASSWORD} ssh ${SSH_USER}@${SSH_HOST} \"rm -rf pipeline\"\n\n    pull-requests:\n        '**':\n            - step:\n                  &lt;&lt;: *build-step\n                  name: Test build\n                  runs-on:\n                      - 'self.hosted'\n                      - 'workspace'\n                  script:\n                      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL} BITBUCKET_WORKSPACE=${BITBUCKET_WORKSPACE} BITBUCKET_REPO_FULL_NAME=${BITBUCKET_REPO_FULL_NAME} CONTAINER=${container} BITBUCKET_PIPELINE_UUID=${BITBUCKET_PIPELINE_UUID} PIPELINE_STATE=0 ./notification.sh\n                      - *cst-install\n                      - export SSH_KNOWN_HOSTS=$(ssh-keyscan -H ${SSH_HOST})\n                      - mkdir -p ~/.ssh\n                      - echo \"$SSH_KNOWN_HOSTS\" &gt;&gt; ~/.ssh/known_hosts\n                      - ping -c 3 ${SSH_HOST}\n                      - sshpass -p \"${SSH_PASSWORD}\" rsync -avz --progress build.sh container-structure-test-junit-compat.xsl \"${SSH_USER}@${SSH_HOST}:pipeline/\"\n                      - sshpass -p ${SSH_PASSWORD} rsync -avz --progress container/ \"${SSH_USER}@${SSH_HOST}:pipeline/container/\"\n                      - sshpass -p ${SSH_PASSWORD} ssh ${SSH_USER}@${SSH_HOST} \"cd ${SSH_PATH} &amp;&amp; DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME} DOCKERHUB_PASSWORD=${DOCKERHUB_PASSWORD} ./build.sh ${container} --push\"\n                      - sshpass -p ${SSH_PASSWORD} ssh ${SSH_USER}@${SSH_HOST} \"rm -rf pipeline\"\n\n    branches:\n        main:\n            - step:\n                  name: Auto tag release\n                  script:\n                      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL} BITBUCKET_WORKSPACE=${BITBUCKET_WORKSPACE} BITBUCKET_REPO_FULL_NAME=${BITBUCKET_REPO_FULL_NAME} CONTAINER=${container} BITBUCKET_PIPELINE_UUID=${BITBUCKET_PIPELINE_UUID} PIPELINE_STATE=3 ./notification.sh\n                      - apt-get update &amp;&amp; apt-get install -y --no-install-recommends git\n                      - git tag -a \"release/${BITBUCKET_BUILD_NUMBER}\" -m \"release/${BITBUCKET_BUILD_NUMBER} on ${BITBUCKET_COMMIT}\" \"${BITBUCKET_COMMIT}\"\n                      - git push origin \"release/${BITBUCKET_BUILD_NUMBER}\"\n    custom:\n        build-and-deploy:\n            - variables:\n                  - name: container\n            - step:\n                  &lt;&lt;: *build-step\n                  name: Manual build and deploy\n                  runs-on:\n                      - 'self.hosted'\n                      - 'workspace'\n                  deployment: production\n                  script:\n                      - *cst-install\n                      - chmod +x ./notification.sh\n                      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL} BITBUCKET_WORKSPACE=${BITBUCKET_WORKSPACE} BITBUCKET_REPO_FULL_NAME=${BITBUCKET_REPO_FULL_NAME} CONTAINER=${container} BITBUCKET_PIPELINE_UUID=${BITBUCKET_PIPELINE_UUID} PIPELINE_STATE=0 ./notification.sh\n                      - export SSH_KNOWN_HOSTS=$(ssh-keyscan -H ${SSH_HOST})\n                      - mkdir -p ~/.ssh\n                      - echo \"$SSH_KNOWN_HOSTS\" &gt;&gt; ~/.ssh/known_hosts\n                      - ping -c 3 ${SSH_HOST}\n                      - sshpass -p \"${SSH_PASSWORD}\" rsync -avz --progress build.sh container-structure-test-junit-compat.xsl notification.sh \"${SSH_USER}@${SSH_HOST}:pipeline/\"\n                      - sshpass -p ${SSH_PASSWORD} rsync -avz --progress container/ \"${SSH_USER}@${SSH_HOST}:pipeline/container/\"\n                      - sshpass -p ${SSH_PASSWORD} ssh ${SSH_USER}@${SSH_HOST} \"cd ${SSH_PATH} &amp;&amp; DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME} DOCKERHUB_PASSWORD=${DOCKERHUB_PASSWORD} ./build.sh ${container} --push\"\n                      - sshpass -p ${SSH_PASSWORD} ssh ${SSH_USER}@${SSH_HOST} \"rm -rf pipeline\"\n</code></pre>"},{"location":"bitbucket-pipelines/docker-multi-arch-pipeline/#buildsh","title":"build.sh","text":"build.sh<pre><code>#!/bin/bash\n\n# @see https://stackoverflow.com/a/20460402\nstringContains() {\n    case $2 in\n        *$1* )\n            return 0\n        ;;\n        *)\n            return 1\n        ;;\n    esac;\n}\n\nif [ -z ${DOCKERHUB_USERNAME+x} ]; then\n    echo \"[ERROR] DOCKERHUB_USERNAME is not provided. Username to a hub.docker.com profile expected\"\n    exit 1\nfi;\n\nif ! [ -x \"$(command -v envsubst)\" ]; then\n    echo \"[ERROR] envsubst is not installed.\"\n    exit 1\nfi;\n\nif ! [ -x \"$(command -v container-structure-test)\" ]; then\n    echo \"[ERROR] container-structure-test is not installed.\"\n    exit 1\nfi;\n\nif [[ \"$@\" == *\"--push\" ]]; then\n    if [ -z ${DOCKERHUB_PASSWORD+x} ]; then\n        echo \"[ERROR] DOCKERHUB_PASSWORD is not provided. Password to the hub.docker.com profile ${DOCKERHUB_USERNAME} expected\"\n        exit 1\n    fi;\n\n    echo \"[INFO] Logging into hub.docker.com\"\n    echo ${DOCKERHUB_PASSWORD} | docker login --username \"${DOCKERHUB_USERNAME}\" --password-stdin\n    echo \"[INFO] Logged into hub.docker.com Successfully\"\nfi\n\necho \"[INFO] Check for cloud buildx builder version\"\nif !(docker buildx version); then\n  echo \"[ERROR] Failed to Check for cloud buildx builder version\"\n  exit 1\nfi;\n\necho \"[INFO] Check for cloud buildx builder\"\nif !(docker buildx ls); then\n  echo \"[ERROR] Failed to Check for cloud buildx builder\"\n  exit 1\nfi;\n\necho \"[INFO] Check for cloud buildx builder\"\nif !(docker buildx ls); then\n  echo \"[ERROR] Failed to Check for cloud buildx builder\"\n  exit 1\nfi;\n\ncontainerdir=container\n\nif ! [ -z \"$1\" ] &amp;&amp; [ -d \"${containerdir}/$1\" ]; then\n    containerdir=${containerdir}/$1\nfi\n\necho \"[INFO] Search for images in ${containerdir}\"\n\nfor dockerfile in $(find \"${containerdir}\" -type f -name .Dockerfile -exec ls {} \\;); do\n    dockerdir=$(dirname $dockerfile)\n    versionfile=\"${dockerdir}/.version\"\n    testreportdir=\"${containerdir}/test-results/\"\n\n    mkdir -p \"${testreportdir}\"\n\n    if ! [ -f \"$versionfile\" ]; then\n        echo \"[ERROR] No version file (${versionfile}) created\"\n        exit 1\n    fi;\n\n    if [ $(cat \"$versionfile\" | wc -m) == \"0\" ]; then\n        echo \"[INFO] No version defined in ${versionfile}\"\n    fi;\n\n    VERSION=$(cat $versionfile)\n    DOCKERIMAGE=$(basename $dockerdir)\n    echo \"[INFO] Process ${DOCKERIMAGE}@${VERSION} (${dockerdir})\"\n\n    for tagfile in $(find \"$dockerdir\" -maxdepth 1 -type f -name '.*.env' -exec ls {} \\;); do\n        tagfilename=$(basename \"$tagfile\" .env)\n        TAG=${tagfilename:1}\n        echo \"[INFO] Process ${DOCKERIMAGE}:${TAG}\"\n\n        echo \"[INFO] Reset build directory\"\n        if [ -d .build ]; then\n            rm -rf .build\n        fi;\n\n        if !(mkdir .build); then\n            echo \"[ERROR] Cannot create build directory\"\n            exit 1\n        fi;\n\n        echo \"[INFO] Process image template\"\n\n        envcontent=$(grep -v \"^#\" \"$tagfile\" | sed -e 's/^\\\\s*(.*?)\\\\s*$/\\\\1/' | sed -e 's/^$//')\n\n        if [ -z ${envcontent+x} -o $(echo \"$envcontent\" | wc -m) -lt 2 ]; then\n            echo \"[INFO] Empty environment provided\"\n            cat \"$dockerfile\" | TAG=$TAG envsubst &gt; .build/Dockerfile\n        else\n            cat \"$dockerfile\" | (export $(echo \"$envcontent\" | xargs) &amp;&amp; TAG=$TAG envsubst &gt; .build/Dockerfile)\n        fi;\n\n        if [ $(ls -1 \"${dockerdir}\" | wc -m) == \"0\" ]; then\n            echo \"[INFO] No data files to copy\"\n        else\n            if !(cp -a ${dockerdir}/* .build); then\n                echo \"[ERROR] Cannot copy data to build directory\"\n                exit 1\n            else\n                echo \"[INFO] Copy data to build directory\"\n            fi;\n        fi;\n\n        if [[ \"$VERSION\" =~ ^[0-9]+$ ]]; then\n            echo \"VERSION enth\u00e4lt nur Zahlen.\"\n                if [[ \"${TAG}\" == \"latest\" ]]; then\n                    tagversion=\"${VERSION}\"\n                    taglatest=\"latest\"\n                    echo \"[INFO] Tag latest ${tagversion}\"\n                else\n                    tagversion=\"${TAG}-${VERSION}\"\n                    taglatest=\"${TAG}-latest\"\n                    echo \"[INFO] Tag ${tagversion}\"\n                fi;\n        else\n            tagversion=\"${TAG}\"\n        fi\n\n        echo \"[INFO] Build image\"\n        if !(docker buildx build --builder builder --tag \"${DOCKERHUB_USERNAME}/${DOCKERIMAGE}:${tagversion}\" --platform linux/amd64,linux/arm64 --push .build); then\n            echo \"[ERROR] Failed building image\"\n            exit 1\n        fi;\n\n        echo \"[INFO] Prepare test files\"\n        [[ ! -d \"${containerdir}/tests\" ]] || rm -rf \"${containerdir}/tests\"\n        mkdir -p \"${containerdir}/tests/\"\n\n        for testfile in $(find \"${containerdir}/.tests\" -type f -name '*.yml' -exec ls {} \\;); do\n            testfile_basename=$(basename \"${testfile}\")\n            # number of words determines, whether a version is in the file name\n            testfile_basename_words=\"${testfile_basename//./ }\"\n            testfile_basename_n_words=$(echo \"${testfile_basename_words}\" | wc -w)\n\n            if [[ ${testfile_basename_n_words} -ne 2 ]]; then # file has at least two dots and therefore has a tag in it\n                if ! stringContains \".${TAG}.yml\" \"${testfile_basename}\"; then # the filename has not the tag in question in it? then skip\n                    echo \"[INFO] Skip ${testfile} as it seems not to match the tag, that needs to be tested (testfile_basename_n_words: ${testfile_basename_n_words} ; testfile_basename_words: ${testfile_basename_words} ; TAG: ${TAG} ; testfile_basename: ${testfile_basename})\"\n                    continue\n                fi\n\n                echo \"[INFO] Take ${testfile} as it seems to match the tag, that needs to be tested (testfile_basename_n_words: ${testfile_basename_n_words} ; testfile_basename_words: ${testfile_basename_words} ; TAG: ${TAG} ; testfile_basename: ${testfile_basename})\"\n            else\n                echo \"[INFO] Take ${testfile} as it seems to be used on any tag (testfile_basename_n_words: ${testfile_basename_n_words} ; testfile_basename_words: ${testfile_basename_words})\"\n            fi\n\n            if [ -z ${envcontent+x} -o $(echo \"$envcontent\" | wc -m) -lt 2 ]; then # no env vars to replace\n                cat \"${testfile}\" | TAG=$TAG envsubst &gt; \"${testfile/.tests/tests}\"\n            else\n                cat \"${testfile}\" | (export $(echo \"$envcontent\" | xargs) &amp;&amp; TAG=$TAG envsubst &gt; \"${testfile/.tests/tests}\")\n            fi;\n        done\n\n        for testfile in $(find \"${containerdir}/tests\" -type f -name '*.yml' -exec ls {} \\;); do\n            testfilename=$(basename \"$testfile\" .yml)\n            reportfile=${testreportdir}/report-${DOCKERIMAGE}-${tagfilename}-${testfilename}.xml\n            echo \"[INFO] Test image against ${testfilename}\"\n\n            if !(container-structure-test test --image \"${DOCKERHUB_USERNAME}/${DOCKERIMAGE}:${tagversion}\" --config \"${testfile}\" --output junit --test-report \"${reportfile}\") then\n                echo \"[ERROR] Failed testing image\"\n                exit 1\n            fi;\n        done\n    done;\ndone;\n</code></pre>"},{"location":"bitbucket-pipelines/docker-multi-arch-pipeline/#notificationsh","title":"notification.sh","text":"notification.sh<pre><code>#!/bin/bash\n\n# @see https://stackoverflow.com/a/20460402\nstringContains() {\n    case $2 in\n        *$1* )\n            return 0\n        ;;\n        *)\n            return 1\n        ;;\n    esac;\n}\n\nif [ -z ${DISCORD_WEBHOOK_URL+x} ]; then\n    echo \"[ERROR] DISCORD_WEBHOOK_URL is not provided. Webhook to a discord.com channel expected.\"\n    exit 1\nfi;\n\nif [ -z ${BITBUCKET_WORKSPACE+x} ]; then\n    echo \"[ERROR] BITBUCKET_WORKSPACE is not provided.\"\n    exit 1\nfi;\n\nif [ -z ${BITBUCKET_REPO_FULL_NAME+x} ]; then\n    echo \"[INFO] BITBUCKET_REPO_FULL_NAME is not provided.\"\n    BITBUCKET_REPO_FULL_NAME=\"unknown\"\nfi;\n\nif [ -z ${container+x} ]; then\n    echo \"[INFO] container is not provided.\"\n    DOCKER_IMAGE=\"All containers\"\nelse\n    DOCKER_IMAGE=$container\nfi;\n\nif [ -z ${PIPELINE_STATE+x} ]; then\n    echo \"[ERROR] $PIPELINE_STATE is not provided.\"\n    exit 1\nfi;\n\nif [ $PIPELINE_STATE -eq 1 ]; then\n    echo \"[INFO] Pipeline is successful\"\n    PIPELINE_STATE=\"successful\"\n    PIPELINE_STATE_EMOTE=\"\u2705\"\n    COLOR=3066993\nelif [ $PIPELINE_STATE -eq 2 ]; then\n    echo \"[INFO] Pipeline is failed\"\n    PIPELINE_STATE=\"failed\"\n    PIPELINE_STATE_EMOTE=\"\u274c\"\n    COLOR=15158332\nelif [ $PIPELINE_STATE -eq 3 ]; then\n    echo \"[INFO] Automatic tag release\"\n    PIPELINE_STATE=\"Automatic tag release\"\n    PIPELINE_STATE_EMOTE=\"\ud83d\udd04\"\n    COLOR=3447003\nelse\n    echo \"[INFO] Pipeline is in progress\"\n    PIPELINE_STATE=\"in progress\"\n    PIPELINE_STATE_EMOTE=\"\ud83d\udd04\"\n    COLOR=3447003\nfi\n\n# Textvariablen und Testdaten\nUSERNAME=\"$BITBUCKET_WORKSPACE Bitbucket Pipeline for Repository $BITBUCKET_REPO_FULL_NAME\"\nMESSAGE=\"@everyone Pipeline $PIPELINE_STATE!\"\nDATA_TITLE=\"$PIPELINE_STATE_EMOTE Pipeline Status $PIPELINE_STATE $PIPELINE_STATE_EMOTE\"\nDATA=\"**Docker Image**\\\\n$DOCKER_IMAGE\\\\n\\u200B\\\\n**Status**\\\\n$PIPELINE_STATE\\\\n\\u200B\\\\n[$BITBUCKET_REPO_FULL_NAME](https://bitbucket.org/$BITBUCKET_REPO_FULL_NAME/pipelines/results/$BITBUCKET_PIPELINE_UUID)\"\nIMAGE_URL=\"https://images.wimwenigerkind.com/wimwenigerkind-transparent-icon.png\"  # Ersetze dies mit der Bild-URL f\u00fcr das Profilbild\n\n# JSON-Payload ausklappen und klar strukturiert ins Skript integrieren\nPAYLOAD=\"{\n  \\\"username\\\": \\\"$USERNAME\\\",\n  \\\"avatar_url\\\": \\\"$IMAGE_URL\\\",\n  \\\"content\\\": \\\"$MESSAGE\\\",\n  \\\"embeds\\\": [\n    {\n      \\\"title\\\": \\\"$DATA_TITLE\\\",\n      \\\"description\\\": \\\"$DATA\\\",\n      \\\"color\\\": $COLOR\n    }\n  ]\n}\"\n\n# Webhook senden\ncurl -X POST -H \"Content-Type: application/json\" -d \"$PAYLOAD\" $DISCORD_WEBHOOK_URL\n\necho \"Webhook mit benutzerdefiniertem Profilbild gesendet!\"\n</code></pre>"},{"location":"bitbucket-pipelines/docker-multi-arch-pipeline/#container-structure-test-junit-compatxsl","title":"container-structure-test-junit-compat.xsl","text":"container-structure-test-junit-compat.xsl<pre><code>&lt;xsl:stylesheet\n        version=\"1.0\"\n        xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n&gt;\n    &lt;xsl:output\n            omit-xml-declaration=\"yes\"\n            indent=\"yes\"\n    /&gt;\n    &lt;xsl:strip-space elements=\"*\" /&gt;\n\n    &lt;!-- recursive through all nodes --&gt;\n    &lt;xsl:template match=\"node()|@*\"&gt;\n        &lt;xsl:copy&gt;\n            &lt;xsl:apply-templates select=\"node()|@*\" /&gt;\n        &lt;/xsl:copy&gt;\n    &lt;/xsl:template&gt;\n\n    &lt;!-- copy &lt;testsuite&gt; and add attributes \"failure\" and \"tests\" based in the testsuite children nodes --&gt;\n    &lt;xsl:template match=\"testsuite\"&gt;\n        &lt;testsuite\n                failures=\"{count(testcase/failure)}\"\n                tests=\"{count(testcase)}\"\n        &gt;\n            &lt;xsl:apply-templates select=\"node()|@*\" /&gt;\n        &lt;/testsuite&gt;\n    &lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre>"},{"location":"bitbucket-pipelines/mkdocs-pipeline/","title":"MkDocs Pipeline","text":""},{"location":"bitbucket-pipelines/mkdocs-pipeline/#mkdocs-installed-with-pip","title":"MkDocs installed with pip","text":"bitbucket-pipelines.yml<pre><code>image: atlassian/default-image:3\npipelines:\n    tags:\n        release/*:\n            -   step:\n                    name: 'Build and Test'\n                    runs-on:\n                        - 'self.hosted'\n                        - 'linux'\n                        - 'workspace'\n                    script:\n                        - apt-get update &amp;&amp; apt-get install -y sshpass rsync openssh-client\n                        - sshpass -p \"${SSH_PASSWORD}\" rsync -avzc --update -e \"ssh -o StrictHostKeyChecking=no\" docs/ ${SSH_USER}@${SSH_SERVER}:${SSH_DIRECTORY}\n</code></pre>"},{"location":"bitbucket-pipelines/mkdocs-pipeline/#mkdocs-installed-with-docker","title":"MkDocs installed with Docker","text":"bitbucket-pipelines.yml<pre><code>COMMING SOON\n</code></pre>"},{"location":"changelog/de/","title":"Changelog","text":"<p>Alle bemerkenswerten \u00c4nderungen an diesem Projekt werden in dieser Datei dokumentiert.</p> <p>Das Format basiert auf Keep a Changelog, und dieses Projekt folgt der Semantischen Versionierung.</p>"},{"location":"changelog/de/#unveroffentlicht","title":"[Unver\u00f6ffentlicht]","text":""},{"location":"changelog/de/#500-2025-09-02","title":"[5.0.0] - 2025-09-02","text":""},{"location":"changelog/de/#added","title":"Added","text":"<ul> <li>Dokumentation zu GitHub Pages migriert</li> </ul>"},{"location":"changelog/de/#401-2025-08-05","title":"[4.0.1] - 2025-08-05","text":""},{"location":"changelog/de/#behoben","title":"Behoben","text":"<ul> <li>Tippfehler im MySQL Docker Compose Beispiel korrigiert</li> <li>Falsche Portzuordnung im MySQL Docker Compose Beispiel behoben</li> </ul>"},{"location":"changelog/de/#400-2025-07-05","title":"[4.0.0] - 2025-07-05","text":""},{"location":"changelog/de/#hinzugefugt","title":"Hinzugef\u00fcgt","text":"<ul> <li>Neue Rubrik f\u00fcr <code>Homebrew</code></li> <li>Neue Dokumentation in Homebrew f\u00fcr das Paket <code>wswcli</code></li> <li>Dokumentation f\u00fcr das Homebrew <code>wswcli</code> Kommandozeilen-Tool <code>patchvendor</code></li> </ul>"},{"location":"changelog/de/#330-2025-04-02","title":"[3.3.0] - 2025-04-02","text":""},{"location":"changelog/de/#hinzugefugt_1","title":"Hinzugef\u00fcgt","text":"<ul> <li>Projektdokumentation f\u00fcr <code>Satisfactory Server</code> zum Docker Hub Bereich</li> </ul>"},{"location":"changelog/de/#321-2025-03-30","title":"[3.2.1] - 2025-03-30","text":""},{"location":"changelog/de/#behoben_1","title":"Behoben","text":"<ul> <li>Tippfehler im Titel der Indexseite</li> </ul>"},{"location":"changelog/de/#320-2024-12-04","title":"[3.2.0] - 2024-12-04","text":""},{"location":"changelog/de/#hinzugefugt_2","title":"Hinzugef\u00fcgt","text":"<ul> <li>Projektdokumentation f\u00fcr <code>Docker Compose Helper Script</code></li> </ul>"},{"location":"changelog/de/#310-2024-11-25","title":"[3.1.0] - 2024-11-25","text":""},{"location":"changelog/de/#hinzugefugt_3","title":"Hinzugef\u00fcgt","text":"<ul> <li><code>Secrets aus Git-Historie entfernen</code> zur <code>git</code> Dokumentation</li> </ul>"},{"location":"changelog/de/#300-2024-11-25","title":"[3.0.0] - 2024-11-25","text":""},{"location":"changelog/de/#hinzugefugt_4","title":"Hinzugef\u00fcgt","text":"<ul> <li>Neue Rubrik f\u00fcr <code>Projekte</code></li> <li>Neue Rubrik f\u00fcr <code>Bitbucket Pipelines</code></li> <li>Neue Dokumentation f\u00fcr <code>Bitbucket Pipelines</code></li> </ul>"},{"location":"changelog/de/#200-2024-11-24","title":"[2.0.0] - 2024-11-24","text":""},{"location":"changelog/de/#hinzugefugt_5","title":"Hinzugef\u00fcgt","text":"<ul> <li>Startseite f\u00fcr die Dokumentation</li> <li>Neue Dokumentation f\u00fcr den <code>Docker Compose</code> Bereich</li> </ul>"},{"location":"changelog/de/#geandert","title":"Ge\u00e4ndert","text":"<ul> <li>Struktur\u00e4nderungen in der Dokumentation</li> </ul>"},{"location":"changelog/de/#140-2024-11-22","title":"[1.4.0] - 2024-11-22","text":""},{"location":"changelog/de/#hinzugefugt_6","title":"Hinzugef\u00fcgt","text":"<ul> <li>Neuer Text zur <code>Docker</code> Dokumentation</li> </ul>"},{"location":"changelog/de/#geandert_1","title":"Ge\u00e4ndert","text":"<ul> <li>Bestehender Text in der <code>Docker</code> Dokumentation aktualisiert</li> </ul>"},{"location":"changelog/de/#130-2024-11-20","title":"[1.3.0] - 2024-11-20","text":""},{"location":"changelog/de/#hinzugefugt_7","title":"Hinzugef\u00fcgt","text":"<ul> <li>Neue Dokumentation f\u00fcr Docker Hub</li> <li>Neue Dokumentation f\u00fcr das <code>Symfony 7 Pipeline</code> Docker Hub Image</li> <li>Neue Dokumentation f\u00fcr das <code>Minecraft Server</code> Docker Hub Image</li> </ul>"},{"location":"changelog/de/#121-2024-11-19","title":"[1.2.1] - 2024-11-19","text":""},{"location":"changelog/de/#behoben_2","title":"Behoben","text":"<ul> <li>Defekter Link in der Keycloak Docker Compose Dokumentation</li> </ul>"},{"location":"changelog/de/#120-2024-11-18","title":"[1.2.0] - 2024-11-18","text":""},{"location":"changelog/de/#hinzugefugt_8","title":"Hinzugef\u00fcgt","text":"<ul> <li>Neue Dokumentation f\u00fcr das Ausf\u00fchren von Docker Compose Skripten</li> <li>Neue Dokumentation f\u00fcr Keycloak Docker Compose</li> </ul>"},{"location":"changelog/de/#entfernt","title":"Entfernt","text":"<ul> <li>Alte Keycloak Dokumentation</li> </ul>"},{"location":"changelog/de/#110-2024-11-18","title":"[1.1.0] - 2024-11-18","text":""},{"location":"changelog/de/#hinzugefugt_9","title":"Hinzugef\u00fcgt","text":"<ul> <li>Neue Rubrik f\u00fcr Docker Compose Skripte</li> <li>Changelog Dokumentationsdatei</li> </ul>"},{"location":"changelog/de/#100-2024-04-24","title":"[1.0.0] - 2024-04-24","text":""},{"location":"changelog/de/#hinzugefugt_10","title":"Hinzugef\u00fcgt","text":"<ul> <li>Erste Ver\u00f6ffentlichung der Dokumentation</li> <li>Erste Dokumentationsdateien hinzugef\u00fcgt</li> </ul>"},{"location":"changelog/de/#versionierung","title":"Versionierung","text":"<p>Dieses Projekt verwendet Semantische Versionierung:</p>"},{"location":"changelog/de/#major-version-x00","title":"Major Version (X.0.0)","text":"<ul> <li>Struktur\u00e4nderungen in der Dokumentation</li> <li>Breaking Changes in der Organisation</li> </ul>"},{"location":"changelog/de/#minor-version-0x0","title":"Minor Version (0.X.0)","text":"<ul> <li>Neue Dokumentationsabschnitte</li> <li>Neue Features oder Inhalte</li> </ul>"},{"location":"changelog/de/#patch-version-00x","title":"Patch Version (0.0.X)","text":"<ul> <li>Fehlerbehebungen in der Dokumentation</li> <li>Kleine Verbesserungen und Korrekturen</li> </ul>"},{"location":"changelog/en/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/en/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/en/#500-2025-09-02","title":"[5.0.0] - 2025-09-02","text":""},{"location":"changelog/en/#added","title":"Added","text":"<ul> <li>Moved documentation to github pages</li> </ul>"},{"location":"changelog/en/#401-2025-08-05","title":"[4.0.1] - 2025-08-05","text":""},{"location":"changelog/en/#fixed","title":"Fixed","text":"<ul> <li>Corrected typo in MySQL Docker Compose example  </li> <li>Fixed incorrect port mapping in MySQL Docker Compose example</li> </ul>"},{"location":"changelog/en/#400-2025-07-05","title":"[4.0.0] - 2025-07-05","text":""},{"location":"changelog/en/#added_1","title":"Added","text":"<ul> <li>New section for <code>Homebrew</code></li> <li>New documentation in Homebrew for the <code>wswcli</code> package</li> <li>Documentation for the Homebrew <code>wswcli</code> command-line tool <code>patchvendor</code></li> </ul>"},{"location":"changelog/en/#330-2025-04-02","title":"[3.3.0] - 2025-04-02","text":""},{"location":"changelog/en/#added_2","title":"Added","text":"<ul> <li>Project documentation for <code>Satisfactory Server</code> to the Docker Hub section</li> </ul>"},{"location":"changelog/en/#321-2025-03-30","title":"[3.2.1] - 2025-03-30","text":""},{"location":"changelog/en/#fixed_1","title":"Fixed","text":"<ul> <li>Typo in the index page title</li> </ul>"},{"location":"changelog/en/#320-2024-12-04","title":"[3.2.0] - 2024-12-04","text":""},{"location":"changelog/en/#added_3","title":"Added","text":"<ul> <li>Project documentation for <code>Docker Compose Helper Script</code></li> </ul>"},{"location":"changelog/en/#310-2024-11-25","title":"[3.1.0] - 2024-11-25","text":""},{"location":"changelog/en/#added_4","title":"Added","text":"<ul> <li><code>Remove secrets from git history</code> to <code>git</code> documentation</li> </ul>"},{"location":"changelog/en/#300-2024-11-25","title":"[3.0.0] - 2024-11-25","text":""},{"location":"changelog/en/#added_5","title":"Added","text":"<ul> <li>New section for <code>Projects</code></li> <li>New section for <code>Bitbucket Pipelines</code></li> <li>New documentation for <code>Bitbucket Pipelines</code></li> </ul>"},{"location":"changelog/en/#200-2024-11-24","title":"[2.0.0] - 2024-11-24","text":""},{"location":"changelog/en/#added_6","title":"Added","text":"<ul> <li>Home page for the documentation</li> <li>New documentation for the <code>Docker Compose</code> section</li> </ul>"},{"location":"changelog/en/#changed","title":"Changed","text":"<ul> <li>Structure changes in the documentation</li> </ul>"},{"location":"changelog/en/#140-2024-11-22","title":"[1.4.0] - 2024-11-22","text":""},{"location":"changelog/en/#added_7","title":"Added","text":"<ul> <li>New text to the <code>Docker</code> documentation</li> </ul>"},{"location":"changelog/en/#changed_1","title":"Changed","text":"<ul> <li>Updated existing text in the <code>Docker</code> documentation</li> </ul>"},{"location":"changelog/en/#130-2024-11-20","title":"[1.3.0] - 2024-11-20","text":""},{"location":"changelog/en/#added_8","title":"Added","text":"<ul> <li>New documentation for Docker Hub</li> <li>New documentation for the <code>Symfony 7 Pipeline</code> Docker Hub image</li> <li>New documentation for the <code>Minecraft Server</code> Docker Hub image</li> </ul>"},{"location":"changelog/en/#121-2024-11-19","title":"[1.2.1] - 2024-11-19","text":""},{"location":"changelog/en/#fixed_2","title":"Fixed","text":"<ul> <li>Broken link in the Keycloak Docker Compose documentation</li> </ul>"},{"location":"changelog/en/#120-2024-11-18","title":"[1.2.0] - 2024-11-18","text":""},{"location":"changelog/en/#added_9","title":"Added","text":"<ul> <li>New documentation for running Docker Compose scripts</li> <li>New documentation for Keycloak Docker Compose</li> </ul>"},{"location":"changelog/en/#removed","title":"Removed","text":"<ul> <li>Old Keycloak documentation</li> </ul>"},{"location":"changelog/en/#110-2024-11-18","title":"[1.1.0] - 2024-11-18","text":""},{"location":"changelog/en/#added_10","title":"Added","text":"<ul> <li>New section for Docker Compose Scripts</li> <li>Changelog documentation file</li> </ul>"},{"location":"changelog/en/#100-2024-04-24","title":"[1.0.0] - 2024-04-24","text":""},{"location":"changelog/en/#added_11","title":"Added","text":"<ul> <li>Initial release of the documentation</li> <li>First documentation files</li> </ul>"},{"location":"changelog/en/#versioning","title":"Versioning","text":"<p>This project uses Semantic Versioning:</p>"},{"location":"changelog/en/#major-version-x00","title":"Major Version (X.0.0)","text":"<ul> <li>Structure changes in the documentation</li> <li>Breaking changes in organization</li> </ul>"},{"location":"changelog/en/#minor-version-0x0","title":"Minor Version (0.X.0)","text":"<ul> <li>New documentation sections</li> <li>New features or content</li> </ul>"},{"location":"changelog/en/#patch-version-00x","title":"Patch Version (0.0.X)","text":"<ul> <li>Bug fixes in the documentation</li> <li>Small improvements and corrections</li> </ul>"},{"location":"docker/apache2/","title":"Apache2","text":"docker-compose.yaml<pre><code>services:\n    apache:\n        image: ubuntu/apache2:latest\n        container_name: apache-node-1\n        ports:\n            - \"80:80\"\n        volumes:\n            - ./apache-data:/var/www/html\n        restart: unless-stopped\n</code></pre>"},{"location":"docker/docker-compose-template/","title":"Docker compose template","text":"docker-compose.yaml"},{"location":"docker/docker-compose/","title":"Docker Compose","text":""},{"location":"docker/docker-compose/#run-docker-compose","title":"Run Docker Compose","text":"<p>With the Docker Compose Plugin installed, you can start the script with the following command: <pre><code>docker compose up -d\n</code></pre> With the Docker Compose Standalone installation, you can start the script with the following command: <pre><code>docker-compose up -d\n</code></pre></p>"},{"location":"docker/docker/","title":"Docker","text":"<p>Docker Installation on Linux</p>"},{"location":"docker/docker/#install-docker","title":"Install Docker","text":""},{"location":"docker/docker/#add-dockers-official-gpg-key","title":"Add Docker's official GPG key","text":"<pre><code>sudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n</code></pre>"},{"location":"docker/docker/#add-the-repository-to-apt-sources","title":"Add the repository to Apt sources","text":"<pre><code>echo \\\n\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n$(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\") stable\" | \\\nsudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre>"},{"location":"docker/docker/#install-latest-version-of-docker","title":"Install Latest version of Docker","text":"<pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre>"},{"location":"docker/docker/#run-a-docker-container","title":"Run a Docker container","text":"<p>To run a Docker container, you can use the following command, replacing <code>&lt;image_name&gt;</code> with the name of the image you want to run:</p> <pre><code>sudo docker run -d --name &lt;container_name&gt; &lt;image_name&gt;\n</code></pre> <p>This command will pull the Docker image if not already present locally, start a container in detached mode, and assign it the given name.</p>"},{"location":"docker/docker/#create-your-own-docker-image-and-push-it-to-docker-hub","title":"Create your own Docker Image and Push it to Docker Hub","text":"<p>WIP</p>"},{"location":"docker/docker/#what-about-docker","title":"What about Docker","text":"<p>Docker is a platform for developing, shipping, and running applications in containers. Containers allow a developer to package up an application with all parts it needs, such as libraries and other dependencies, and ship it all out as one package. By doing so, the developer can be sure that the application will run on any other Linux machine regardless of any customized settings that machine might have that could differ from the machine used for writing and testing the code.</p>"},{"location":"docker/docker/#virtualisierung-vs-containerisierung","title":"Virtualisierung vs Containerisierung","text":"<p>Container:</p> <ul> <li>Leichtgewichtig </li> <li>Teilt den OS-Kernel mit dem Host </li> <li>Enth\u00e4lt nur die notwendigen Anwendungen und Bibliotheken </li> <li>Startet schnell und verbraucht wenig Ressourcen </li> </ul> <p>Virtuelle Maschinen: - Schwergewichtig  - Enth\u00e4lt das gesamte Betriebssystem (erfordert Hypervisor) - Isolation durch Hypervisor  - Langsamer und ressourcenintensiver Start</p>"},{"location":"docker/docker/#docker","title":"Docker","text":"<p>Docker ist eine Open-Source-Plattform, die es erm\u00f6glicht, Anwendungen in Containern zu verpacken, bereitzustellen und auszuf\u00fchren. Dadurch werden Anwendungen und deren Abh\u00e4ngigkeiten unabh\u00e4ngig vom Host-Betriebssystem, was das Deployment vereinfacht. Docker-Container sind portable Laufzeitumgebungen, die isolierte und reproduzierbare Umgebungen durch Docker-Images bereitstellen, die alle n\u00f6tigen Abh\u00e4ngigkeiten enthalten.</p> <p>Docker-Architektur: - Docker-Engine: Kernkomponente, die Container erstellt und verwaltet.  - Docker-Daemon: Hintergrundprozess, der Docker-Objekte (Container, Images, Volumes) steuert.  - Docker-CLI: Kommandozeilenwerkzeug zur Interaktion mit der Docker-Engine.</p> <p>Vorteile von Docker: - Portabilit\u00e4t: Einmal erstellte Container laufen \u00fcberall (Cloud, Server, lokal).  - Konsistenz: Gleiche Umgebungen in Entwicklung und Produktion.  - Schnelles Deployment: Container starten schneller als VMs.  - Ressourceneffizienz: Container ben\u00f6tigen weniger Speicher und Rechenleistung.</p>"},{"location":"docker/docker/#beispiel-fur-docker-befehle","title":"Beispiel f\u00fcr Docker-Befehle:","text":"<p>Hier wird gezeigt wie einfach es ist einen Container zu starten.</p> <pre><code>docker run -d -p 8888:80 --name apache2 ubuntu/apache2:latest\n</code></pre> <p>Mit diesem Befehl ist es m\u00f6glich einen Apache2 Webserver in einem Container zu starten. Der Container wird im Hintergrund gestartet und der Port 8888 des Hosts wird auf den Port 80 des Containers gemappt.</p> <p>Aufbau des Docker-Befehls: - <code>docker run</code>: Startet einen neuen Container. - <code>-d</code>: Startet den Container im Hintergrund. - <code>-p 8888:80</code>: Mapt den Port 8888 des Hosts auf den Port 80 des Containers. - <code>--name apache2</code>: Gibt dem Container den Namen \"apache2\". - <code>ubuntu/apache2:latest</code>: Verwendet das Image \"ubuntu/apache2\" mit dem Tag \"latest\". - <code>latest</code>: Tag des Images, in diesem Fall die neueste Version.</p>"},{"location":"docker/docker/#dockerbefehle","title":"Dockerbefehle","text":"<ul> <li><code>docker run</code>: Startet einen neuen Container.</li> <li><code>docker ps</code>: Zeigt alle laufenden Container an.</li> <li><code>docker ps -a</code>: Zeigt alle Container an.</li> <li><code>docker stop &lt;container_id&gt;</code>: Stoppt einen Container.</li> <li><code>docker start &lt;container_id&gt;</code>: Startet einen gestoppten Container.</li> <li><code>docker rm &lt;container_id&gt;</code>: L\u00f6scht einen Container.</li> <li><code>docker rmi &lt;image_id&gt;</code>: L\u00f6scht ein Image.</li> <li><code>docker images</code>: Zeigt alle Images an.</li> <li><code>docker pull &lt;image_name&gt;</code>: L\u00e4dt ein Image herunter.</li> <li><code>docker push &lt;image_name&gt;</code>: L\u00e4dt ein Image auf Docker Hub hoch.</li> <li><code>docker exec -it &lt;container_id&gt; bash</code>: Startet eine interaktive Shell in einem Container.</li> <li><code>docker logs &lt;container_id&gt;</code>: Zeigt die Logs eines Containers an.</li> <li><code>docker inspect &lt;container_id&gt;</code>: Zeigt detaillierte Informationen \u00fcber einen Container an.</li> <li><code>docker stats</code>: Zeigt die Ressourcennutzung der laufenden Container an.</li> </ul>"},{"location":"docker/docker/#docker-volumes","title":"Docker-Volumes","text":"<p>Persistente Speicherl\u00f6sung f\u00fcr Docker-Container, die Daten auch nach dem Neustarten des Containers bewahrt.</p>"},{"location":"docker/docker/#docker-networks","title":"Docker-Networks","text":"<p>Es gibt 7 verschiedene Netzwerkarten in Docker:</p> <p>Default Bridge Network: Standard-Netzwerk, das von Docker bereitgestellt wird. - Ein virtuelles Netzwerk.</p> <p>Docker Netzwerke anzeigen lassen:</p> <p><pre><code>docker network ls\n</code></pre> </p> <ul> <li><code>NETWORK ID</code>: Eindeutige ID des Netzwerks.</li> <li><code>NAME</code>: Name des Netzwerks.</li> <li><code>DRIVER</code>: Treiber des Netzwerks.</li> <li><code>SCOPE</code>: Sichtbarkeit des Netzwerks.</li> </ul>"},{"location":"docker/docker/#bridge-netzwerk","title":"Bridge Netzwerk","text":"<p>Standard Netzwerke: <code>bridge</code></p> <p>Das Bridge-Netzwerk ist das Standardnetzwerk, das Docker verwendet, wenn kein anderes Netzwerk explizit angegeben wird. Es ist eine virtuelle Netzwerkschnittstelle, die es Containern erm\u00f6glicht, miteinander zu kommunizieren, w\u00e4hrend sie von der Au\u00dfenwelt isoliert bleiben.</p> <p>Eigenschaften: - Container erhalten eine eigene IP-Adresse innerhalb des Bridge-Netzwerks (standardm\u00e4\u00dfig 172.x.x.x). - Container k\u00f6nnen \u00fcber diese IP-Adressen oder Container-Namen miteinander kommunizieren. - Die Au\u00dfenwelt kann auf Container nur zugreifen, wenn Ports explizit freigegeben werden (-p oder --publish). - Es nutzt NAT (Network Address Translation), um den Verkehr zwischen dem Docker-Host und Containern zu erm\u00f6glichen.</p> <p>Vorteile: - Einfache Konfiguration und Verwendung. - Gute Isolation der Container. - Einfacher Zugriff auf Container durch Port-Mapping.</p> <p>Mit dem Befehl <pre><code>docker network inspect bridge\n</code></pre> kann man sich die Informationen zum <code>bridge</code> Netzwerk anzeigen lassen.</p> <pre><code>[\n  {\n    \"Name\": \"bridge\",\n    \"Id\": \"3d7014a8b159afd9018310fa42a78f7e84fdb6dabab7c5a072146d94eb814f0c\",\n    \"Created\": \"2024-11-05T07:22:58.436486668Z\",\n    \"Scope\": \"local\",\n    \"Driver\": \"bridge\",\n    \"EnableIPv6\": false,\n    \"IPAM\": {\n      \"Driver\": \"default\",\n      \"Options\": null,\n      \"Config\": [\n        {\n          \"Subnet\": \"172.17.0.0/16\",\n          \"Gateway\": \"172.17.0.1\"\n        }\n      ]\n    },\n    \"Internal\": false,\n    \"Attachable\": false,\n    \"Ingress\": false,\n    \"ConfigFrom\": {\n      \"Network\": \"\"\n    },\n    \"ConfigOnly\": false,\n    \"Containers\": {\n      \"3f55ac9eac446f2d88b54ba6c31fc81a869e6002303020dd477552f8dad7ba78\": {\n        \"Name\": \"OllamaUI\",\n        \"EndpointID\": \"09b08412df42d0e358130315ce86e322f99427a3effe7d8f3ed6060be26a83f4\",\n        \"MacAddress\": \"02:42:ac:11:00:05\",\n        \"IPv4Address\": \"172.17.0.5/16\",\n        \"IPv6Address\": \"\"\n      },\n      \"95a180a5fe90890294cf71690fe9bcc0534d60d22f71bd5a085b769f13fbc6e5\": {\n        \"Name\": \"my-mysql\",\n        \"EndpointID\": \"31b3324e7f8d07d166f7cd7f7e950ac3ee7f63da87fc326d3513ac15cb1ed420\",\n        \"MacAddress\": \"02:42:ac:11:00:03\",\n        \"IPv4Address\": \"172.17.0.3/16\",\n        \"IPv6Address\": \"\"\n      },\n      \"bc27198fa2b63fe07bff11c18be6814e05ba0e54c0bc38f48c7ea150dcf756d7\": {\n        \"Name\": \"buildx_buildkit_wizardly_lamport0\",\n        \"EndpointID\": \"30b2b3362b0cbe37b7b387aa38f8001971fb7ddfec92325d850e8854010668b4\",\n        \"MacAddress\": \"02:42:ac:11:00:02\",\n        \"IPv4Address\": \"172.17.0.2/16\",\n        \"IPv6Address\": \"\"\n      },\n      \"c5780243f11251bc99800c91e44e2013ea9813a8dbe20f3edea9cec3cf7592e9\": {\n        \"Name\": \"uptime-kuma\",\n        \"EndpointID\": \"7d006cacd02343fbcbdb8fb261fef188d264bd958683ec4a8003ad1adcb8f5d3\",\n        \"MacAddress\": \"02:42:ac:11:00:04\",\n        \"IPv4Address\": \"172.17.0.4/16\",\n        \"IPv6Address\": \"\"\n      }\n    },\n    \"Options\": {\n      \"com.docker.network.bridge.default_bridge\": \"true\",\n      \"com.docker.network.bridge.enable_icc\": \"true\",\n      \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n      \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n      \"com.docker.network.bridge.name\": \"docker0\",\n      \"com.docker.network.driver.mtu\": \"65535\"\n    },\n    \"Labels\": {}\n  }\n]\n</code></pre>"},{"location":"docker/docker/#host-netzwerk","title":"Host Netzwerk","text":"<p>Es nutzt NAT (Network Address Translation), um den Verkehr zwischen dem Docker-Host und Containern zu erm\u00f6glichen.</p> <p>Eigenschaften: - Container verwendet die Netzwerk-Schnittstellen des Hosts (z. B. eth0 des Hosts). - Kein Port-Mapping erforderlich, da der Container die gleichen Ports wie der Host verwendet. - Schneller als Bridge, da keine virtuelle Netzwerkschicht dazwischen liegt. - Keine Isolation auf Netzwerkebene.</p> <p>Vorteile: - Weniger Overhead und daher schneller. - Sinnvoll f\u00fcr Anwendungen, die direkten Zugriff auf das Netzwerk des Hosts ben\u00f6tigen (z. B. Monitoring-Anwendungen).</p> <p>Nachteile: - Keine Isolation auf Netzwerkebene. - Konfilkte m\u00f6glich, wenn ein Container und der Host denselben Port verwenden.</p> <p>Mit dem Befehl <pre><code>docker insepct host\n</code></pre> kann man sich die Informationen zu dem <code>host</code> Netzwerk anzeigen lassen.</p> <pre><code>[\n    {\n        \"Name\": \"host\",\n        \"Id\": \"58c3a04140448fec2277fd593a9912b33f073291b6f063f47d9c107a8394ea5a\",\n        \"Created\": \"2024-08-01T11:20:36.553257125Z\",\n        \"Scope\": \"local\",\n        \"Driver\": \"host\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": null,\n            \"Config\": null\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {\n            \"0301d49daa889b28000bbc8e1d49599f56fdf2f09ea417e9e4ab36ba5e87b68c\": {\n                \"Name\": \"cloudflared\",\n                \"EndpointID\": \"38e2fff78942b987ea8f5ec50e82be4a27f9522d7302a74ca1452744ec0ef500\",\n                \"MacAddress\": \"\",\n                \"IPv4Address\": \"\",\n                \"IPv6Address\": \"\"\n            }\n        },\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n</code></pre>"},{"location":"docker/docker/#none-netzwerk","title":"None Netzwerk","text":"<p>Das None-Netzwerk deaktiviert die Netzwerkkonnektivit\u00e4t des Containers vollst\u00e4ndig. Der Container hat keinen Zugriff auf andere Container, den Host oder das Internet.</p> <p>Eigenschaften: - Container ist vollst\u00e4ndig isoliert auf Netzwerkebene. - Keine Netzwerkschnittstelle im Container au\u00dfer der lo (Loopback-Schnittstelle). - Ideal f\u00fcr Anwendungen, die kein Netzwerk ben\u00f6tigen.</p> <p>Vorteile: - Maximale Sicherheit und Isolation. - Verhindert versehentliche Netzwerkkonflikte.</p> <p>Nachteile: - Kein Zugriff auf andere Dienste oder das Internet.</p> <p>Mit dem Befehl <pre><code>docker inspect none\n</code></pre> kann man sich die Informationen zu dem <code>none</code> Netzwerk anzeigen lassen.</p> <pre><code>[\n  {\n    \"Name\": \"none\",\n    \"Id\": \"e51e946b1190696a71652a49ade22ee15a0dae768e3f8e0b4e9c039f22625435\",\n    \"Created\": \"2024-08-01T11:20:36.547084166Z\",\n    \"Scope\": \"local\",\n    \"Driver\": \"null\",\n    \"EnableIPv6\": false,\n    \"IPAM\": {\n      \"Driver\": \"default\",\n      \"Options\": null,\n      \"Config\": null\n    },\n    \"Internal\": false,\n    \"Attachable\": false,\n    \"Ingress\": false,\n    \"ConfigFrom\": {\n      \"Network\": \"\"\n    },\n    \"ConfigOnly\": false,\n    \"Containers\": {},\n    \"Options\": {},\n    \"Labels\": {}\n  }\n]\n</code></pre>"},{"location":"docker/docker/#vergleiche-der-standard-netzwerke","title":"Vergleiche der Standard Netzwerke","text":"Feature Bridge Host None Isolation Gut Keine Vollst\u00e4ndig Performance Moderate Hoch Hoch Internet-Zugang Optional (Port-Mapping) Direkt Kein Zugang Anwendung Standard-Container Netzwerkanwendungen Isolierte Prozesse <p>Fazit: - Verwende bridge, wenn du Container isolieren, aber dennoch miteinander kommunizieren lassen m\u00f6chtest. - Verwende host, wenn die Performance wichtig ist oder der Container direkten Zugriff auf das Host-Netzwerk ben\u00f6tigt. - Verwende none, wenn der Container kein Netzwerk ben\u00f6tigt oder maximale Isolation erforderlich ist.</p>"},{"location":"docker/docker/#nicht-standard-netzwerke","title":"Nicht-Standard Netzwerke","text":"<p>Neben den Standardnetzwerken (bridge, host, none) bietet Docker auch benutzerdefinierte Netzwerke, die mehr Kontrolle und Flexibilit\u00e4t bei der Konfiguration erm\u00f6glichen. Diese Netzwerke erlauben es, Container gezielt zu verbinden und komplexere Netzwerktopologien zu erstellen. Es gibt haupts\u00e4chlich zwei nicht-standardm\u00e4\u00dfige Netzwerke: Overlay und Macvlan, sowie benutzerdefinierte Bridge-Netzwerke.</p>"},{"location":"docker/docker/#benutzerdefiniertes-bridge-netzwerk","title":"Benutzerdefiniertes Bridge-Netzwerk","text":"<p>Ein benutzerdefiniertes Bridge-Netzwerk ist eine Erweiterung des Standard-Bridge-Netzwerks mit zus\u00e4tzlichen Funktionen, wie z. B. benutzerdefinierte Subnetze, IP-Adressen und DNS-Optionen.</p> <p>Eigenschaften: - Container im selben benutzerdefinierten Netzwerk k\u00f6nnen sich gegenseitig \u00fcber ihren Container-Namen erreichen (automatisches DNS). - Erm\u00f6glicht benutzerdefinierte Subnetze und statische IP-Adressen. - Die Container sind von anderen Netzwerken isoliert, es sei denn, es wird explizit eine Verbindung hergestellt.</p> <p>Vorteile: - Erleichtert die Kommunikation zwischen Containern im selben Netzwerk. - Bessere Kontrolle \u00fcber Netzwerkeinstellungen (z. B. IP-Bereich, Gateway).</p> <p>Beispiel: <pre><code>  docker network create \\\n    --driver bridge \\\n    --subnet=192.168.1.0/24 \\\n    my_custom_network\n\ndocker run --network my_custom_network --name webserver nginx\ndocker run --network my_custom_network --name appserver my_app\n</code></pre> In diesem Fall k\u00f6nnen <code>webserver</code> und <code>appserver</code> sich gegenseitig \u00fcber ihre Namen erreichen.</p>"},{"location":"docker/docker/#macvlan-netzwerk","title":"Macvlan-Netzwerk","text":"<p>Das Macvlan-Netzwerk gibt Containern eine eigene MAC-Adresse und macht sie im physischen Netzwerk des Hosts sichtbar. Jeder Container erscheint wie ein eigenst\u00e4ndiges Ger\u00e4t im Netzwerk.</p> <p>Eigenschaften: - Container erhalten ihre IP-Adresse direkt vom Netzwerk des Hosts, als w\u00e4ren sie physische Ger\u00e4te. - Container k\u00f6nnen direkt mit anderen Ger\u00e4ten im Netzwerk kommunizieren, ohne NAT oder Port-Mapping. - Container im Macvlan-Netzwerk sind isoliert von Containern im Host-Netzwerk (sofern keine zus\u00e4tzlichen Verbindungen erstellt werden).</p> <p>Vorteile: - Erm\u00f6glicht direkten Zugriff auf das physische Netzwerk. - N\u00fctzlich f\u00fcr Umgebungen, in denen Container als physische Ger\u00e4te auftreten sollen (z. B. bei Legacy-Systemen).</p> <p>Nachteile: - Keine direkte Kommunikation zwischen Host und Containern im Macvlan-Netzwerk (es sei denn, zus\u00e4tzliche Konfigurationen wie <code>bridge</code> werden hinzugef\u00fcgt).</p> <p>Beispiel: <pre><code>docker network create \\\n    --driver macvlan \\\n    --subnet=192.168.1.0/24 \\\n    --gateway=192.168.1.1 \\\n    -o parent=eth0 \\\n    my_macvlan_network\n\ndocker run --network my_macvlan_network --ip 192.168.1.100 nginx\n</code></pre> In diesem Beispiel hat der Container <code>nginx</code> eine eigene IP-Adresse im gleichen Netzwerk wie der Host.</p>"},{"location":"docker/docker/#vergleich-der-nicht-standard-netzwerke","title":"Vergleich der nicht Standard Netzwerke:","text":"Netzwerktreiber Kommunikationstyp Anwendungsfall Bridge Container-zu-Container Standard-Container-Kommunikation. Benutzerdefiniert Bridge Isolierte Gruppen von Containern Einfachere Service-Kommunikation. Macvlan Direktes LAN-Zugreifen Legacy-Systeme, direkte Netzwerkzugriffe."},{"location":"docker/docker/#welches-netzwerk-sollte-ich-verwenden","title":"Welches Netzwerk sollte ich verwenden?","text":"<ul> <li>Benutzerdefiniertes Bridge-Netzwerk: F\u00fcr Container, die auf demselben Host kommunizieren sollen, aber in einer isolierten Umgebung.</li> <li>Macvlan-Netzwerk: F\u00fcr Container, die mit physischen Netzwerken interagieren m\u00fcssen oder von Legacy-Systemen erkannt werden sollen.</li> </ul>"},{"location":"docker/docker/#docker-compose","title":"Docker Compose","text":"<p>Hier ist ein Beispiel f\u00fcr einen f\u00fcr einen Apache Webserver und eine MySQL Datenbank.</p> <pre><code>version: '3'\nservices:\n  web:\n    image: ubuntu/apache2:latest\n    ports:\n      - \"8888:80\" \n    volumes:\n      - ./html:/var/www/html\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: example\n      MYSQL_DATABASE: example_db\n      MYSQL_USER: example_user\n      MYSQL_PASSWORD: example_password\n    volumes:\n      - ./mysql_data:/var/lib/mysql\n</code></pre> <p>Erkl\u00e4rung des Docker-Compose-Skripts:</p> <p>web: - <code>image</code>: Verwendet das Image \"ubuntu/apache2\" mit dem Tag \"latest\". - <code>ports</code>: Mapt den Port 8888 des Hosts auf den Port 80 des Containers. - <code>volumes</code>: Mountet das Verzeichnis <code>./html</code> des Hosts in das Verzeichnis <code>/var/www/html</code> des Containers.</p> <p>db: - <code>image</code>: Verwendet das Image \"mysql\" mit dem Tag \"5.7\". - <code>environment</code>: Setzt Umgebungsvariablen f\u00fcr die MySQL-Datenbank. - <code>volumes</code>: Mountet das Verzeichnis <code>./mysql_data</code> des Hosts in das Verzeichnis <code>/var/lib/mysql</code> des Containers.</p> <p>Zum starten des Docker-Compose-Skripts wird folgender Befehl verwendet:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Mit diesem Befehl werden alle Container im Docker-Compose-Script im Hintergrund gestartet.</p>"},{"location":"docker/docker/#docker-compose-befehle","title":"Docker Compose befehle","text":"<ul> <li><code>docker-compose up -d</code>: Startet alle Container in einem Docker-Compose-Projekt.</li> <li><code>docker-compose down</code>: Stoppt und entfernt alle Container in einem Docker-Compose-Projekt.</li> <li><code>docker-compose logs</code>: Zeigt die Logs aller Container in einem Docker-Compose-Projekt an.</li> <li><code>docker-compose exec &lt;service_name&gt; bash</code>: Startet eine interaktive Shell in einem Service eines Docker-Compose-Projekts.</li> <li><code>docker-compose ps</code>: Zeigt den Status aller Services in einem Docker-Compose-Projekt an.</li> <li><code>docker-compose build</code>: Baut die Images f\u00fcr alle Services in einem Docker-Compose-Projekt.</li> <li><code>docker-compose pull</code>: L\u00e4dt die Images f\u00fcr alle Services in einem Docker-Compose-Projekt herunter.</li> <li><code>docker-compose push</code>: L\u00e4dt die Images f\u00fcr alle Services in einem Docker-Compose-Projekt auf Docker Hub hoch.</li> <li><code>docker-compose restart</code>: Startet alle Services in einem Docker-Compose-Projekt neu.</li> <li><code>docker-compose stop</code>: Stoppt alle Services in einem Docker-Compose-Projekt.</li> <li><code>docker-compose start</code>: Startet alle Services in einem Docker-Compose-Projekt.</li> <li><code>docker-compose down -v</code>: Stoppt und entfernt alle Container und Volumes in einem Docker-Compose-Projekt.</li> <li><code>docker-compose top</code>: Zeigt die Prozesse eines Services in einem Docker-Compose-Projekt an.</li> <li><code>docker-compose events</code>: Zeigt die Events eines Docker-Compose-Projekts an.q</li> <li><code>docker-compose config</code>: Zeigt die Konfiguration eines Docker-Compose-Projekts an.</li> <li><code>docker-compose images</code>: Zeigt die Images eines Docker-Compose-Projekts an.</li> </ul>"},{"location":"docker/docker/#docker-compose-befehle-fur-einzelne-services","title":"Docker Compose Befehle f\u00fcr einzelne Services","text":"<ul> <li><code>docker-compose up -d --scale &lt;service_name&gt;=&lt;number_of_instances&gt;</code>: Startet mehrere Instanzen eines Services in einem Docker-Compose-Projekt.</li> <li><code>docker-compose exec &lt;service_name&gt; &lt;command&gt;</code>: F\u00fchrt ein Kommando in einem Service eines Docker-Compose-Projekts aus.</li> <li><code>docker-compose run &lt;service_name&gt; &lt;command&gt;</code>: F\u00fchrt ein Kommando in einem neuen Container eines Services eines Docker-Compose-Projekts aus.</li> <li><code>docker-compose logs -f &lt;service_name&gt;</code>: Zeigt die Logs eines Services in einem Docker-Compose-Projekt an und folgt ihnen.</li> <li><code>docker-compose port &lt;service_name&gt; &lt;port&gt;</code>: Zeigt den Host-Port eines Service-Ports in einem Docker-Compose-Projekt an.</li> <li><code>docker-compose pause &lt;service_name&gt;</code>: Pausiert einen Service in einem Docker-Compose-Projekt.</li> <li><code>docker-compose unpause &lt;service_name&gt;</code>: Setzt die Ausf\u00fchrung eines pausierten Services in einem Docker-Compose-Projekt fort.</li> <li><code>docker-compose kill &lt;service_name&gt;</code>: Beendet einen Service in einem Docker-Compose-Projekt gewaltsam.</li> <li><code>docker-compose rm &lt;service_name&gt;</code>: Entfernt einen Service in einem Docker-Compose-Projekt.</li> <li><code>docker-compose scale &lt;service_name&gt;=&lt;number_of_instances&gt;</code>: Skaliert die Anzahl der Instanzen eines Services in einem Docker-Compose-Projekt.</li> <li><code>docker-compose start &lt;service_name&gt;</code>: Startet einen Service in einem Docker-Compose-Projekt.</li> <li><code>docker-compose stop &lt;service_name&gt;</code>: Stoppt einen Service in einem Docker-Compose-Projekt.</li> <li><code>docker-compose restart &lt;service_name&gt;</code>: Startet einen Service in einem Docker-Compose-Projekt neu.</li> <li><code>docker-compose build &lt;service_name&gt;</code>: Baut das Image f\u00fcr einen Service in einem Docker-Compose-Projekt.</li> <li><code>docker-compose pull &lt;service_name&gt;</code>: L\u00e4dt das Image f\u00fcr einen Service in einem Docker-Compose-Projekt herunter.</li> <li><code>docker-compose push &lt;service_name&gt;</code>: L\u00e4dt das Image f\u00fcr einen Service in einem Docker-Compose-Projekt auf Docker Hub hoch.</li> <li><code>docker-compose exec &lt;service_name&gt; /bin/bash</code>: Startet eine interaktive Shell in einem Service eines Docker-Compose-Projekts.</li> </ul>"},{"location":"docker/docker/#docker-images-und-dockerfiles","title":"Docker Images und Dockerfiles","text":""},{"location":"docker/docker/#docker-images","title":"Docker Images","text":"<p>Ein Docker-Image ist eine schreibgesch\u00fctzte Vorlage, die alles enth\u00e4lt, um einen Container zu starten. Eigene Docker-Images lassen sich mit Dockerfiles erstellen.</p> <p>Beispiele f\u00fcr den Aufbau des Namens eines Docker-Images: <code>&lt;repository&gt;/&lt;image&gt;:&lt;tag&gt;</code> - <code>repository</code>: Name des Docker-Repositories. - <code>image</code>: Name des Docker-Images. - <code>tag</code>: Version des Docker-Images.</p> <p><code>wimdevgroup/minecraft:fabric-1.21.1</code> - Der erste Teil (wimdevgroup) ist der Benutzername.  - Nach dem / steht der Name des Images.  - Der Tag (fabric-1.21.1) gibt die Version des Images an.</p>"},{"location":"docker/docker/#dockerfiles","title":"Dockerfiles","text":"<p>Ein Dockerfile ist eine Textdatei, die eine Reihe von Anweisungen enth\u00e4lt, um ein Docker-Image zu erstellen. Hier ist ein einfaches Beispiel f\u00fcr ein Dockerfile:</p> <pre><code># Basis-Image mit Java\nFROM openjdk:24-jdk-slim\n# Arbeitsverzeichnis festlegen\nWORKDIR /minecraft\n# Installieren der ben\u00f6tigten Pakete\nRUN apt-get update &amp;&amp; apt-get install -y \\\n      nano \\\n      wget \\\n      curl\n# Herunterladen der Minecraft-Server-JAR (Fabric)\nADD https://meta.fabricmc.net/v2/versions/loader/1.21.1/0.16.9/1.0.1/server/jar minecraft-server.jar\n# EULA akzeptieren\nRUN echo \"eula=true\" &gt; eula.txt\n# Minecraft-Port freigeben\nEXPOSE 25565\n# Speicher festlegen\nENV MEMORY=2G\n# Startbefehl f\u00fcr den Server\nCMD [\"sh\", \"-c\", \"java -Xmx${MEMORY} -Xms${MEMORY} -jar minecraft-server.jar nogui\"]\n</code></pre> <p>Erkl\u00e4rung des Dockerfiles: - <code>FROM</code>: Setzt das Basis-Image f\u00fcr das Docker-Image. - <code>WORKDIR</code>: Legt das Arbeitsverzeichnis im Container fest. - <code>RUN</code>: F\u00fchrt Befehle im Container aus. - <code>ADD</code>: L\u00e4dt eine Datei von einer URL herunter und f\u00fcgt sie zum Container hinzu. - <code>EXPOSE</code>: Legt den Port fest, der f\u00fcr den Container freigegeben werden soll. - <code>ENV</code>: Setzt eine Umgebungsvariable. - <code>CMD</code>: Legt den Standardbefehl fest, der beim Start des Containers ausgef\u00fchrt wird.</p>"},{"location":"docker/docker/#andere-wichtige-dockerfile-befehle","title":"Andere wichtige Dockerfile-Befehle:","text":"<ul> <li><code>COPY</code>: Kopiert Dateien und Verzeichnisse in den Container.</li> <li><code>ENTRYPOINT</code>: Legt den Befehl fest, der beim Start des Containers ausgef\u00fchrt wird.</li> <li><code>VOLUME</code>: Erstellt ein Volumen im Container.</li> <li><code>USER</code>: Setzt den Benutzer, unter dem der Befehl ausgef\u00fchrt wird.</li> <li><code>LABEL</code>: F\u00fcgt Metadaten zum Image hinzu.</li> <li><code>ARG</code>: Definiert eine Build-Variable.</li> <li><code>ONBUILD</code>: F\u00fchrt Befehle aus, wenn das Image als Basis f\u00fcr ein anderes Image verwendet wird.</li> <li><code>STOPSIGNAL</code>: Setzt das Signal, das beim Stoppen des Containers gesendet wird.</li> <li><code>HEALTHCHECK</code>: F\u00fcgt einen Gesundheitscheck zum Container hinzu.</li> <li><code>SHELL</code>: Legt die Standard-Shell f\u00fcr den Container fest.</li> <li><code>MAINTAINER</code>: Legt den Autor des Dockerfiles fest.</li> </ul>"},{"location":"docker/docker/#docker-image-aus-dockerfile-bauen","title":"Docker-Image aus Dockerfile bauen","text":"<p>Um ein Dockerfile als Image zu verwenden, muss es gebaut werden. Hier ist der Befehl, um ein Docker-Image aus einem Dockerfile zu bauen:</p> <pre><code>docker build -t wimdevgroup/minecraft:fabric-1.21.1 .\n</code></pre> <p>Dabei definiert <code>-t</code> den Namen und den Tag des Images, und <code>.</code> gibt das Verzeichnis an, in dem sich das Dockerfile befindet.</p> <p>Um das Docker Image dann auszuf\u00fchren, kann folgender Befehl verwendet werden:</p> <pre><code>docker run -d -p 25565:25565 -e MEMORY=4G wimdevgroup/minecraft:fabric-1.21.1\n</code></pre> <p>Das image wird f\u00fcr das System gebaut, auf dem der Befehl ausgef\u00fchrt wird. Das bedeutet, dass das Image nur auf dem System ausgef\u00fchrt werden kann, auf dem es gebaut wurde. Wenn man es auf einem MacBook baut ist das Image f\u00fcr ARM ger\u00e4te gebaut und kann nicht auf einem x86 System ausgef\u00fchrt werden.</p> <p>Um das Image f\u00fcr ein andere Systeme zu bauen, kann man Buildx verwenden. Buildx ist ein Docker CLI Plugin, das es erm\u00f6glicht, Multi-Architecture Images zu bauen.</p> <p>Um das Docker Image auf Docker Hub hochzuladen, kann folgender Befehl verwendet werden:</p> <pre><code>docker push wimdevgroup/minecraft:fabric-1.21.1\n</code></pre>"},{"location":"docker/docker/#docker-buildx","title":"Docker Buildx","text":"<p>Docker Buildx ist ein Docker CLI Plugin, das es erm\u00f6glicht, Multi-Architecture Images zu bauen.</p>"},{"location":"docker/docker/#installation-von-docker-buildx","title":"Installation von Docker Buildx","text":"<p>Das Buildx Plugin wird standartm\u00e4\u00dfig mit Docker installiert. Um sicherzustellen, dass es installiert ist, kann folgender Befehl verwendet werden:</p> <pre><code>docker buildx version\n</code></pre> <p>Um das Buildx Plugin zu aktivieren, kann folgender Befehl verwendet werden:</p> <pre><code>docker buildx create --use\n</code></pre> <p>Das erstellt einen Builder mit dem Namen <code>default</code> und aktiviert ihn. Ein Builder ist eine Instanz von Buildx, die verwendet wird, um Images zu bauen.</p>"},{"location":"docker/docker/#bauen-eines-multi-architecture-images","title":"Bauen eines Multi-Architecture Images","text":"<p>Um ein Multi-Architecture Image zu bauen, kann folgender Befehl verwendet werden:</p> <pre><code>docker buildx build --builder default --tag wimdevgroup/minecraft:fabric-1.21.1 --platform linux/amd64,linux/arm64 --push  -f .Dockerfile .\n</code></pre> <p>Dabei definiert <code>--builder default</code> den Builder, der verwendet werden soll, <code>--tag</code> den Namen und den Tag.</p> <p><code>--platform</code> definiert die Plattformen, f\u00fcr die das Image gebaut werden soll.</p> <p><code>--push</code> l\u00e4dt das Image auf Docker Hub hoch.</p> <p><code>-f</code> definiert das Dockerfile, das verwendet werden soll.</p> <p><code>.</code> gibt das Verzeichnis an, in dem sich das Dockerfile befindet. Der Punkt gibt an, dass das aktuelle Verzeichnis verwendet werden soll.</p>"},{"location":"docker/docker/#docker-hub","title":"Docker Hub","text":"<p>Docker Hub ist ein Cloud-basierter Dienst, der es Entwicklern erm\u00f6glicht, Docker-Images zu speichern, zu verwalten und zu teilen. Docker Hub bietet \u00f6ffentliche und private Registries, in denen Docker-Images gehostet werden k\u00f6nnen.</p> <p>Wenn man einen Docker-Container das erstemal startet, wird das Image von Docker Hub heruntergeladen. Wenn es nicht lokal vorhanden ist.</p>"},{"location":"docker/faster-whisper/","title":"Whisper","text":"docker-compose.yaml<pre><code>services:\n    faster-whisper:\n        image: lscr.io/linuxserver/faster-whisper:latest\n        container_name: faster-whisper\n        environment:\n            - PUID=1000\n            - PGID=1000\n            - TZ=Etc/UTC\n            - WHISPER_MODEL=tiny-int8\n            - WHISPER_BEAM=1 #optional\n            - WHISPER_LANG=en #optional\n        volumes:\n            - ./config:/config\n        ports:\n            - 10300:10300\n        restart: unless-stopped\n</code></pre>"},{"location":"docker/gitea/","title":"Gitea","text":"docker-compose.yaml<pre><code>services:\n    gitea:\n        image: gitea/gitea:latest\n        container_name: gitea\n        environment:\n            - USER_UID=1000\n            - USER_GID=1000\n        volumes:\n            - ./gitea/git-server:/data\n        ports:\n            - \"3000:3000\"\n            - \"22:22\"\n        restart: always\n    db:\n        image: mariadb:latest\n        container_name: gitea_db\n        environment:\n            - MYSQL_ROOT_PASSWORD=gitea_root_password\n            - MYSQL_DATABASE=gitea\n            - MYSQL_USER=gitea\n            - MYSQL_PASSWORD=gitea_password\n        volumes:\n            - ./gitea/git-server-db:/var/lib/mysql\n        restart: always\n</code></pre>"},{"location":"docker/guacamole/","title":"Guacamole","text":"<p>Guacamole installation on Docker</p>"},{"location":"docker/guacamole/#install-guacamole","title":"Install Guacamole","text":""},{"location":"docker/guacamole/#run-the-installation-script","title":"Run the Installation Script","text":"<pre><code>docker run -d -p 8080:8080 -v /guacamole:/config --name Guacamole oznu/guacamole\n</code></pre>"},{"location":"docker/guacamole/#login","title":"Login","text":"<p>Open the web UI using IP:Port</p>"},{"location":"docker/guacamole/#default-credentials","title":"Default credentials","text":"<ul> <li>Username: guacadmin</li> <li>Password: guacadmin</li> </ul>"},{"location":"docker/guacamole/#change-default-password","title":"Change default password","text":"<p>Go to Settings --&gt; Users --&gt; New User --&gt; Edit New User --&gt; paste new credentials and set all permissions to true --&gt; Save and logout --&gt; login with new credentials and delet the old User</p>"},{"location":"docker/guacamole/#new-connection","title":"New connection","text":"<p>Go to Setting --&gt; Connections --&gt; click on New Connection --&gt; paste credentials --&gt; and save</p> <p></p>"},{"location":"docker/guacamole/#add-an-ssh-connection","title":"Add an SSH Connection","text":"<ul> <li>Name: SSH Connection</li> <li>Protocol: SSH</li> <li>Hostname: Server-IP</li> <li>Port: Default SSH PORT 22</li> <li>Username: Server SSH Username</li> <li>Password: Server SSH Password</li> </ul>"},{"location":"docker/homepage/","title":"Homepage","text":"<pre><code>mkdir /homepage\ncd /homepage\n</code></pre>"},{"location":"docker/homepage/#docker-composeyaml","title":"docker-compose.yaml","text":"<pre><code>nano docker-compose.yaml\n</code></pre> <pre><code>version: \"3.3\"\nservices:\n  homepage:\n    image: ghcr.io/gethomepage/homepage:latest\n    container_name: homepage\n    restart: unless-stopped\n    ports:\n      - 3000:3000\n    env_file: .env\n    volumes:\n      - ./config:/app/config # Make sure your local config directory exists\n      # - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations, see alternative methods\n    environment:\n      PUID: $PUID\n      PGID: $PGID\n</code></pre>"},{"location":"docker/homepage/#create-env","title":"create .env","text":"<pre><code>touch .env\n</code></pre> <p>PUID and PGID</p> <pre><code>id\n</code></pre> <p>edit the .env file to add the PUID and PGID</p> <pre><code>nano .env\n</code></pre> <p>add the PUID and PGID to .env file</p> <pre><code>PUID=0\nPGID=0\n</code></pre>"},{"location":"docker/keycloak/","title":"Keycloak Docker Compose","text":"docker-compose.yaml<pre><code>services:\n\n  # Postgres\n  postgres-prod-01:\n    image: postgres:14\n    container_name: postgres-prod-01\n    environment:\n      - POSTGRES_DB=${POSTGRES_DB}\n      - POSTGRES_USER=${POSTGRES_USER}\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\n    volumes:\n      - ./postgres_data:/var/lib/postgresql/data\n    networks:\n      - keycloak\n\n  # Keycloak\n  keycloak-prod-01:\n    image: quay.io/keycloak/keycloak:26.2.4\n    environment:\n      - DB_VENDOR=postgres\n      - KC_DB_URL=jdbc:postgresql://postgres-prod-01/${POSTGRES_DB}\n      - KC_DB=postgres\n      - KC_DB_USERNAME=${POSTGRES_USER}\n      - KC_DB_PASSWORD=${POSTGRES_PASSWORD}\n      - KC_BOOTSTRAP_ADMIN_USERNAME=${KC_BOOTSTRAP_ADMIN_USERNAME}\n      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KC_BOOTSTRAP_ADMIN_PASSWORD}\n      - KC_HOSTNAME=${DOMAIN}\n      - KC_PROXY_ADDRESS_FORWARDING=true\n      #- KC_HOSTNAME_STRICT=false\n      #- KC_PROXY=edge\n      - KC_HTTP_ENABLED=true\n      - KC_HOSTNAME_DEBUG=true\n      - KC_PROXY_HEADERS=xforwarded\n      #- KC_FEATURES=passkeys,recovery-codes,login,docker,scripts\n    ports:\n      - \"8080:8080\"\n    networks:\n      - keycloak\n      - frontend\n    volumes:\n      - ./keycloak_data:/opt/keycloak/data\n      - ./keycloak_themes:/opt/keycloak/themes\n      - ./keycloak_providers:/opt/keycloak/providers\n    command: ['start']\n    labels:\n      - traefik.enable=true\n      - traefik.http.routers.keycloak_prod.tls=true\n      - traefik.http.routers.keycloak_prod.tls.certresolver=cloudflare\n      - traefik.http.routers.keycloak_prod.entrypoints=websecure\n      - traefik.http.routers.keycloak_prod.rule=Host(`${DOMAIN}`)\n      - traefik.http.services.keycloak_prod.loadbalancer.server.port=8080\n\nnetworks:\n  keycloak:\n    driver: bridge\n  frontend:\n    external: true\n</code></pre> <p>Help run the script</p>"},{"location":"docker/mailpit/","title":"Mailpit","text":"docker-compose.yaml<pre><code>services:\n    mailpit:\n        image: axllent/mailpit\n        container_name: mailpit\n        restart: unless-stopped\n        volumes:\n            - ./mailpit-data:/data\n        environment:\n            - MP_DATABASE=/data/mailpit.db\n            - TZ=Europe/Berlin\n        ports:\n            - 8025:8025\n            - 1025:1025\n</code></pre>"},{"location":"docker/mysql/","title":"MySQL","text":"docker-compose.yaml<pre><code>services:\n    mysql:\n        image: mysql:latest # (1)\n        container_name: mysql-container\n        environment:\n            MYSQL_ROOT_PASSWORD: supersecurepassword\n        ports:\n            - \"3306:3306\"\n        volumes:\n            - ./mysql_data:/var/lib/mysql\n</code></pre>"},{"location":"docker/nextcloud/","title":"Nextcloud","text":"docker-compose.yaml<pre><code>services:\n    db:\n        image: mariadb:10.6\n        restart: always\n        environment:\n            MYSQL_ROOT_PASSWORD: example_root_password\n            MYSQL_DATABASE: nextcloud\n            MYSQL_USER: nextcloud_user\n            MYSQL_PASSWORD: example_password\n        volumes:\n            - db:/var/lib/mysql\n    app:\n        image: nextcloud:apache\n        restart: always\n        ports:\n            - :80\n        volumes:\n            - nextcloud:/var/www/html\n            - apps:/var/www/html/custom_apps\n            - config:/var/www/html/config\n            - data:/var/www/html/data\n        environment:\n            MYSQL_HOST: db\n            MYSQL_DATABASE: nextcloud\n            MYSQL_USER: nextcloud_user\n            MYSQL_PASSWORD: example_password\n            NEXTCLOUD_ADMIN_USER: admin\n            NEXTCLOUD_ADMIN_PASSWORD: admin_password\nvolumes:\n    nextcloud:\n    db:\n    apps:\n    config:\n    data:\n</code></pre>"},{"location":"docker/piper/","title":"Piper","text":"docker-compose.yaml<pre><code>services:\n    piper:\n        image: lscr.io/linuxserver/piper:latest\n        container_name: piper\n        environment:\n            - PUID=1000\n            - PGID=1000\n            - TZ=Etc/UTC\n            - PIPER_VOICE=en_US-lessac-medium\n            - PIPER_LENGTH=1.0 #optional\n            - PIPER_NOISE=0.667 #optional\n            - PIPER_NOISEW=0.333 #optional\n            - PIPER_SPEAKER=0 #optional\n            - PIPER_PROCS=1 #optional\n        volumes:\n            - ./config:/config\n        ports:\n            - 10200:10200\n        restart: unless-stopped\n</code></pre>"},{"location":"docker/portainer/","title":"Portainer","text":"<p>Portainer installation on Docker</p>"},{"location":"docker/portainer/#install-portainer","title":"Install Portainer","text":""},{"location":"docker/portainer/#create-volume","title":"Create Volume","text":"<pre><code>docker volume create portainer_data\n</code></pre>"},{"location":"docker/portainer/#run-installation-script","title":"Run Installation Script","text":"<pre><code>docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest\n</code></pre>"},{"location":"docker/stirling-pdf/","title":"Stirling PDF","text":"docker-compose.yaml<pre><code>services:\n    stirling-pdf:\n        image: frooodle/s-pdf:latest\n        ports:\n            - '8080:8080'\n        volumes:\n            - /docker/stirling_pdf/trainingData:/usr/share/testdata\n            - /docker/stirling_pdf/extraConfigs:/configs\n            - /docker/stirling_pdf/customFiles:/customFiles/\n            - /docker/stirling_pdf/logs:/logs/\n        environment:\n            - DOCKER_ENABLE_SECURITY=false\n            - INSTALL_BOOK_AND_ADVANCED_HTML_OPS=false\n            - LANGS=en_GBs\n</code></pre>"},{"location":"docker/uptime-kuma/","title":"Uptime Kuma","text":"<p>Uptime Kuma installation on Docker</p>"},{"location":"docker/uptime-kuma/#install-uptime-kuma","title":"Install Uptime Kuma","text":"<pre><code>docker run -d --restart=always -p 3001:3001 -v uptime-kuma:/app/data --name uptime-kuma louislam/uptime-kuma:1\n</code></pre>"},{"location":"docker/wireguard-and-ui/","title":"Wireguard + Wireguard Ui","text":""},{"location":"docker/wireguard-and-ui/#wireguard","title":"Wireguard","text":"<p>WireGuard ist ein Open-Source-VPN-Protokoll, das entwickelt wurde, um eine schnellere, einfachere und sicherere VPN-L\u00f6sung im Vergleich zu \u00e4lteren Protokollen wie OpenVPN und IPSec bereitzustellen. Es wurde von Jason A. Donenfeld entwickelt und ist in den Linux-Kernel integriert worden, was seine Integration und Verbreitung erleichtert.</p>"},{"location":"docker/wireguard-and-ui/#docker-hub-images","title":"Docker Hub Images","text":"<ul> <li>linuxserver/wireguard image</li> <li>ngoduykhanh/wireguard-ui image</li> </ul>"},{"location":"docker/wireguard-and-ui/#docker-composeyml","title":"Docker-Compose.yml","text":"<pre><code>version: \"3\"\n\nservices:\n  wireguard:\n    image: linuxserver/wireguard:v1.0.20210914-ls7 #Use this image, latest seems to have issues\n    container_name: wireguard\n    cap_add:\n      - NET_ADMIN\n    volumes:\n      - ./config:/config\n    ports:\n      - \"5000:5000\"\n      - \"51820:51820/udp\"\n\n  wireguard-ui:\n    image: ngoduykhanh/wireguard-ui:latest\n    container_name: wireguard-ui\n    depends_on:\n      - wireguard\n    cap_add:\n      - NET_ADMIN\n    network_mode: service:wireguard\n    environment:\n      - SENDGRID_API_KEY\n      - EMAIL_FROM_ADDRESS\n      - EMAIL_FROM_NAME\n      - SESSION_SECRET\n      - WGUI_USERNAME=admin\n      - WGUI_PASSWORD=password\n      - WG_CONF_TEMPLATE\n      - WGUI_MANAGE_START=true\n      - WGUI_MANAGE_RESTART=true\n    logging:\n      driver: json-file\n      options:\n        max-size: 50m\n    volumes:\n      - ./db:/app/db\n      - ./config:/etc/wireguard\n</code></pre>"},{"location":"docker/wordpress/","title":"Wordpress","text":"docker-compose.yaml<pre><code>services:\n    wordpress:\n        image: wordpress:php8.1-apache\n        container_name: wordpress\n        ports:\n            - \"80:80\"\n        environment:\n            WORDPRESS_DB_HOST: db\n            WORDPRESS_DB_USER: wp_user\n            WORDPRESS_DB_PASSWORD: wp_pass\n            WORDPRESS_DB_NAME: wp_database\n        volumes:\n            - wp_data:/var/www/html\n        networks:\n            - wordpress_network\n        depends_on:\n            - db\n    db:\n        image: mysql:5.7\n        container_name: wordpress_db\n        environment:\n            MYSQL_DATABASE: wp_database\n            MYSQL_USER: wp_user\n            MYSQL_PASSWORD: wp_pass\n            MYSQL_ROOT_PASSWORD: root_pass\n        volumes:\n            - db_data:/var/lib/mysql\n        networks:\n            - wordpress_network\nnetworks:\n    wordpress_network:\n        driver: bridge\nvolumes:\n    wp_data:\n    db_data:\n</code></pre>"},{"location":"docker-hub/docker-hub/","title":"Wim Dev Group Docker Hub","text":"<p>WimDevGroup Docker Hub</p>"},{"location":"docker-hub/minecraft/","title":"Minecraft Server Docker Image","text":""},{"location":"docker-hub/minecraft/#en","title":"EN","text":""},{"location":"docker-hub/minecraft/#description","title":"Description","text":"<p>A Docker image for a Minecraft server based on OpenJDK. This image allows for easy hosting of a Minecraft server. With flexible memory configuration, you can get your own Minecraft server up and running in just a few minutes.</p> <p>Minecraft Server Docker Hub Repository</p>"},{"location":"docker-hub/minecraft/#features","title":"Features","text":"<ul> <li>Easy Setup: Start your Minecraft server in just a few minutes with minimal effort.</li> <li>Customizable Memory: Configure the maximum and minimum memory for the Java Virtual Machine through environment variables.</li> <li>Download Server JAR: Automatically download the Minecraft server JAR from a specified URL.</li> <li>EULA Acceptance: Automatically accept the Minecraft EULA upon startup.</li> </ul>"},{"location":"docker-hub/minecraft/#usage-with-tags","title":"Usage with Tags","text":""},{"location":"docker-hub/minecraft/#1-pull-image","title":"1. Pull Image","text":"<pre><code>docker pull wimdevgroup/minecraft:fabric-1.21.1\n</code></pre>"},{"location":"docker-hub/minecraft/#2-start-container","title":"2. Start Container","text":"<p>To start a new Minecraft server container, use the following command:</p> <pre><code>docker run -d -p 25565:25565 -e MEMORY=2G --name minecraft-server wimdevgroup/minecraft:fabric-1.21.1\n</code></pre> <ul> <li>VERSION: Replace <code>fabric-1.21.1</code> with the desired Minecraft version.</li> <li>MEMORY: (Optional) Set the amount of RAM that the Minecraft server should use (default: 2G).</li> </ul>"},{"location":"docker-hub/minecraft/#usage-with-custom-server-jar-url","title":"Usage with Custom Server JAR URL","text":""},{"location":"docker-hub/minecraft/#1-pull-image_1","title":"1. Pull Image","text":"<pre><code>docker pull wimdevgroup/minecraft:universal\n</code></pre>"},{"location":"docker-hub/minecraft/#2-start-container_1","title":"2. Start Container","text":"<p>To start a new Minecraft server container, use the following command:</p> <pre><code>docker run -d -p 25565:25565 -e MEMORY=2G -e JAR=&lt;SERVER-JAR-URL&gt; --name minecraft-server wimdevgroup/minecraft:universal\n</code></pre> <ul> <li>MEMORY: (Optional) Set the amount of RAM that the Minecraft server should use (default: 2G).</li> <li>JAR: Change the URL to the required Minecraft server JAR.</li> </ul>"},{"location":"docker-hub/minecraft/#environment-variables","title":"Environment Variables","text":"Variable Description Default Value MEMORY Maximum and minimum memory (e.g., 2G) 2G JAR URL to the Minecraft server JAR -"},{"location":"docker-hub/minecraft/#exposed-ports","title":"Exposed Ports","text":"<ul> <li>25565: Default port for Minecraft servers.</li> </ul>"},{"location":"docker-hub/minecraft/#support","title":"Support","text":"<p>If you have questions or issues, please contact me at info@wimwenigerkind.com or through Docker Hub support.</p>"},{"location":"docker-hub/minecraft/#de","title":"DE","text":""},{"location":"docker-hub/minecraft/#beschreibung","title":"Beschreibung","text":"<p>Ein Docker-Image f\u00fcr einen Minecraft-Server, das auf OpenJDK basiert. Dieses Image erm\u00f6glicht das einfache Hosting eines Minecraft-Servers. Mit einer flexiblen Konfiguration zur Anpassung des Arbeitsspeichers kannst du deinen eigenen Minecraft-Server in wenigen Minuten zum Laufen bringen.</p> <p>Minecraft Server Docker Hub Repository</p>"},{"location":"docker-hub/minecraft/#features_1","title":"Features","text":"<ul> <li>Einfaches Setup: Starte deinen Minecraft-Server in nur wenigen Minuten mit minimalem Aufwand.</li> <li>Anpassbarer Arbeitsspeicher: Stelle den maximalen und minimalen Arbeitsspeicher f\u00fcr die Java Virtual Machine \u00fcber Umgebungsvariablen ein.</li> <li>Download der Server-JAR: Lade die Minecraft-Server-JAR automatisch von einer angegebenen URL.</li> <li>EULA-Akzeptanz: Akzeptiere die Minecraft EULA automatisch beim Start.</li> </ul>"},{"location":"docker-hub/minecraft/#verwendung-mit-tags","title":"Verwendung mit Tags","text":""},{"location":"docker-hub/minecraft/#1-image-herunterladen","title":"1. Image herunterladen","text":"<pre><code>docker pull wimdevgroup/minecraft:fabric-1.21.1\n</code></pre>"},{"location":"docker-hub/minecraft/#2-container-starten","title":"2. Container starten","text":"<p>Um einen neuen Minecraft-Server-Container zu starten, verwende den folgenden Befehl:</p> <pre><code>docker run -d -p 25565:25565 -e MEMORY=2G --name minecraft-server wimdevgroup/minecraft:fabric-1.21.1\n</code></pre> <ul> <li>VERSION: Ersetze <code>fabric-1.21.1</code> mit der gewollten Minecraft-Version.</li> <li>MEMORY: (Optional) Setze die Menge an RAM, die der Minecraft-Server verwenden soll (Standard: 2G).</li> </ul>"},{"location":"docker-hub/minecraft/#verwendung-mit-eigener-server-jar-url","title":"Verwendung mit eigener Server-JAR-URL","text":""},{"location":"docker-hub/minecraft/#1-image-herunterladen_1","title":"1. Image herunterladen","text":"<pre><code>docker pull wimdevgroup/minecraft:universal\n</code></pre>"},{"location":"docker-hub/minecraft/#2-container-starten_1","title":"2. Container starten","text":"<p>Um einen neuen Minecraft-Server-Container zu starten, verwende den folgenden Befehl:</p> <pre><code>docker run -d -p 25565:25565 -e MEMORY=2G -e JAR=&lt;SERVER-JAR-URL&gt; --name minecraft-server wimdevgroup/minecraft:universal\n</code></pre> <ul> <li>MEMORY: (Optional) Setze die Menge an RAM, die der Minecraft-Server verwenden soll (Standard: 2G).</li> <li>JAR: \u00c4ndere die URL zu der ben\u00f6tigten Minecraft-Server-JAR.</li> </ul>"},{"location":"docker-hub/minecraft/#umgebungsvariablen","title":"Umgebungsvariablen","text":"Variable Beschreibung Standardwert MEMORY Maximaler und minimaler Speicher (z. B. 2G) 2G JAR URL zur Minecraft-Server-JAR -"},{"location":"docker-hub/minecraft/#expose-ports","title":"Expose Ports","text":"<ul> <li>25565: Standardport f\u00fcr Minecraft-Server.</li> </ul>"},{"location":"docker-hub/minecraft/#support_1","title":"Support","text":"<p>Wenn du Fragen oder Probleme hast, kontaktiere mich bitte \u00fcber info@wimwenigerkind.com oder den Docker Hub-Support.</p>"},{"location":"docker-hub/satisfactory-server/","title":"Satisfactory Server Docker","text":"<p>This is a Docker image for running a Satisfactory server. It is based on the official steamcmd <code>cm2network/steamcmd:latest</code> Docker image and includes the necessary dependencies to run a Satisfactory server.</p> <pre><code>---\nservices:\n  satisfactory-server:\n    image: wimdevgroup/satisfactory:latest\n    environment:\n      - CPU_MHZ=2500\n    ports:\n      - \"7777:7777/udp\"\n      - \"7777:7777/tcp\"\n      - \"15777:15777/udp\"\n      - \"15000:15000/udp\"\n    restart: unless-stopped\n    volumes:\n      - satisfactory-data:/satisfactory\nvolumes:\n  satisfactory-data:\n</code></pre>"},{"location":"docker-hub/symfony-7-pipeline/","title":"Symfony 7 Pipeline Image","text":""},{"location":"docker-hub/symfony-7-pipeline/#en","title":"EN","text":""},{"location":"docker-hub/symfony-7-pipeline/#description","title":"Description","text":"<p>A Docker image for a Symfony 7 application with a CI/CD pipeline. This image allows for easy deployment of Symfony 7 applications with a pre-configured CI/CD pipeline.</p> <p>Base Dockerfile Image: <code>debian:bullseye-slim</code></p> <p>Symfony 7 Pipeline Docker Hub Repository</p>"},{"location":"docker-hub/symfony-7-pipeline/#features","title":"Features","text":"<ul> <li>PHP: Pre-installed PHP for running Symfony 7 applications.</li> <li>Composer: Pre-installed Composer for managing Symfony 7 applications.</li> <li>XDdebug: Pre-installed Xdebug for debugging Symfony 7 applications.</li> <li>Deployer: Pre-installed Deployer for deploying Symfony 7 applications.</li> </ul>"},{"location":"docker-hub/symfony-7-pipeline/#php","title":"PHP","text":"<p>The following PHP configuration is set in the <code>docker.ini</code> file: <pre><code>upload_max_filesize = 128M\npost_max_size = 128M\nmax_execution_time = 30\nmemory_limit = 1G\ndate.timezone = \"Europe/Berlin\"\n</code></pre></p>"},{"location":"docker-hub/symfony-7-pipeline/#pre-installed-packages","title":"Pre-installed Packages","text":"<ul> <li>PHP</li> <li>XDdebug</li> <li>Deployer</li> <li>Composer</li> <li>wget</li> <li>ca-certificates</li> <li>rsync</li> <li>ssh</li> <li>tar</li> <li>build-essential</li> <li>gcc</li> <li>g++</li> <li>jq</li> <li>zip</li> <li>git</li> <li>sudo</li> <li>gpg</li> <li>gpg-agent</li> <li>curl</li> <li>unzip</li> <li>nano</li> <li>msmtp</li> <li>xsltproc</li> </ul>"},{"location":"homebrew/wswcli/","title":"Wim Shopware CLI","text":""},{"location":"homebrew/wswcli/#installation","title":"Installation","text":""},{"location":"homebrew/wswcli/#using-go","title":"Using Go","text":"<pre><code>go install github.com/wimwenigerkind/wswcli@latest\n</code></pre>"},{"location":"homebrew/wswcli/#using-homebrew-macoslinux","title":"Using Homebrew (macOS/Linux)","text":"<p><pre><code>brew install wimwenigerkind/tap/wswcli\n</code></pre> or <pre><code>brew tap wimwenigerkind/homebrew-tap\nbrew install wswcli\n</code></pre></p>"},{"location":"homebrew/wswcli/#download-binary","title":"Download Binary","text":"<p>Download the latest binary from the releases page.</p>"},{"location":"homebrew/wswcli/#usage","title":"Usage","text":"<pre><code>wswcli --help\n</code></pre>"},{"location":"homebrew/wswcli/#patchvendor-command","title":"PatchVendor Command","text":"<p>Generate unified diff patches for Shopware vendor modifications:</p> <pre><code># Basic usage\nwswcli patchvendor source.php patched.php output.patch\n\n# Interactive mode\nwswcli patchvendor\n\n# Directory processing\nwswcli patchvendor vendor/shopware/core custom/patches patches/\n</code></pre>"},{"location":"homebrew/wswcli/#features","title":"Features","text":"<ul> <li>Directory processing: Batch process entire directory structures</li> <li>Smart validation: Comprehensive input validation with detailed error messages</li> <li>Vendor path handling: Automatic vendor path extraction and normalization</li> <li>Interactive mode: Guided workflow with helpful prompts and suggestions</li> </ul> <p>For detailed documentation, see patchvendor.md.</p>"},{"location":"homebrew/wswcli/#development","title":"Development","text":""},{"location":"homebrew/wswcli/#prerequisites","title":"Prerequisites","text":"<ul> <li>Go 1.21 or later</li> </ul>"},{"location":"homebrew/wswcli/#building","title":"Building","text":"<pre><code>make build\n</code></pre>"},{"location":"homebrew/wswcli/#testing","title":"Testing","text":"<pre><code>make test\n</code></pre>"},{"location":"homebrew/wswcli/#creating-a-release","title":"Creating a Release","text":"<pre><code>make release\n</code></pre>"},{"location":"homebrew/wswcli/#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"homebrew/wswcli/patchvendor/","title":"PatchVendor Command Documentation","text":""},{"location":"homebrew/wswcli/patchvendor/#deutsch","title":"Deutsch","text":""},{"location":"homebrew/wswcli/patchvendor/#uberblick","title":"\u00dcberblick","text":"<p>Der <code>patchvendor</code> Command erstellt unified diff Patches f\u00fcr Shopware Vendor-Modifikationen. Das Tool ist speziell f\u00fcr die Arbeit mit Shopware-Projekten entwickelt und generiert Patches mit korrekten Vendor-Pfaden f\u00fcr eine saubere Integration in Entwicklungsworkflows.</p>"},{"location":"homebrew/wswcli/patchvendor/#verwendung","title":"Verwendung","text":"<pre><code>wswcli patchvendor [SOURCE] [PATCHED] [OUTPUT]\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#parameter","title":"Parameter","text":"<ul> <li>SOURCE: Pfad zur originalen, unmodifizierten Vendor-Datei oder -Verzeichnis</li> <li>PATCHED: Pfad zur modifizierten Version mit Ihren \u00c4nderungen</li> <li>OUTPUT: Pfad, wo die generierte Patch-Datei gespeichert werden soll</li> </ul>"},{"location":"homebrew/wswcli/patchvendor/#modi","title":"Modi","text":""},{"location":"homebrew/wswcli/patchvendor/#1-direkter-modus","title":"1. Direkter Modus","text":"<p>Alle Parameter werden direkt angegeben:</p> <pre><code>wswcli patchvendor vendor/shopware/core/Framework/Plugin/PluginManager.php \\\n                   custom/patches/PluginManager.php \\\n                   patches/shopware-plugin-manager.patch\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#2-interaktiver-modus","title":"2. Interaktiver Modus","text":"<p>Ohne Parameter startet der interaktive Modus mit hilfreichen Eingabeaufforderungen:</p> <pre><code>wswcli patchvendor\n</code></pre> <p>Das Tool f\u00fchrt Sie durch die Eingabe und bietet: - Erkl\u00e4rungen f\u00fcr jeden Parameter - Beispiele f\u00fcr typische Shopware-Pfade - Automatische Pfad-Vorschl\u00e4ge f\u00fcr die Ausgabe - Best\u00e4tigungsdialog vor der Verarbeitung</p>"},{"location":"homebrew/wswcli/patchvendor/#3-teilweise-parameter","title":"3. Teilweise Parameter","text":"<p>Sie k\u00f6nnen auch nur einige Parameter angeben:</p> <pre><code># Nur SOURCE angeben\nwswcli patchvendor vendor/shopware/core/Framework/Plugin/PluginManager.php\n\n# SOURCE und PATCHED angeben\nwswcli patchvendor vendor/shopware/core/Framework/Plugin/PluginManager.php \\\n                   custom/patches/PluginManager.php\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#automatische-pfad-vorschlage","title":"Automatische Pfad-Vorschl\u00e4ge","text":"<p>Wenn Sie den OUTPUT-Parameter weglassen, generiert das Tool automatisch einen strukturierten Pfad:</p> <p>Format: <code>&lt;Arbeitsverzeichnis&gt;/artifacts/patches/&lt;provider&gt;/&lt;package&gt;/&lt;timestamp&gt;-patch.patch</code></p> <p>Beispiel: - Input: <code>vendor/shopware/core/Framework/Plugin/PluginManager.php</code> - Vorschlag: <code>./artifacts/patches/shopware/core/1704369600-patch.patch</code></p>"},{"location":"homebrew/wswcli/patchvendor/#unterstutzte-dateitypen","title":"Unterst\u00fctzte Dateitypen","text":"<p>Das Tool unterst\u00fctzt alle g\u00e4ngigen Dateitypen in Shopware-Projekten: - PHP: <code>.php</code> - JavaScript: <code>.js</code>, <code>.ts</code>, <code>.jsx</code>, <code>.tsx</code> - Styling: <code>.css</code>, <code>.scss</code>, <code>.sass</code>, <code>.less</code> - Templates: <code>.html</code>, <code>.twig</code> - Konfiguration: <code>.xml</code>, <code>.json</code>, <code>.yml</code>, <code>.yaml</code> - Dokumentation: <code>.md</code>, <code>.txt</code> - Andere: <code>.sql</code>, <code>.sh</code>, <code>.vue</code></p>"},{"location":"homebrew/wswcli/patchvendor/#beispiele","title":"Beispiele","text":""},{"location":"homebrew/wswcli/patchvendor/#einfache-datei-modifikation","title":"Einfache Datei-Modifikation","text":"<pre><code># Originale Shopware-Datei\nvendor/shopware/core/Framework/Plugin/PluginManager.php\n\n# Ihre modifizierte Version\ncustom/modifications/PluginManager.php\n\n# Patch erstellen\nwswcli patchvendor vendor/shopware/core/Framework/Plugin/PluginManager.php \\\n                   custom/modifications/PluginManager.php \\\n                   patches/plugin-manager-modifications.patch\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#verzeichnis-basierte-patches","title":"Verzeichnis-basierte Patches","text":"<pre><code># Ganzes Verzeichnis patchen\nwswcli patchvendor vendor/shopware/administration/Resources/app/administration/src \\\n                   custom/administration-modifications \\\n                   patches/administration-changes.patch\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#interaktiver-workflow","title":"Interaktiver Workflow","text":"<pre><code>$ wswcli patchvendor\n\n=== Shopware Vendor Patch Generator ===\nThis tool creates unified diff patches for Shopware vendor modifications.\n\nSOURCE PATH:\n   This is the original, unmodified vendor file or directory.\n   Example: vendor/shopware/core/Framework/Plugin/PluginManager.php\n   Enter source path: vendor/shopware/core/Framework/Plugin/PluginManager.php\n\nPATCHED PATH:\n   This is the modified version of the vendor file or directory.\n   It contains your custom changes that should be preserved.\n   Example: custom/plugins/MyPlugin/vendor-patches/PluginManager.php\n   Enter patched path: custom/modifications/PluginManager.php\n\nOUTPUT PATH:\n   This is where the generated patch file will be saved.\n   The patch can later be applied using 'git apply' or 'patch' command.\n   Suggested: ./artifacts/patches/shopware/core/1704369600-patch.patch\n   Enter output path (or press Enter for suggested): \n\nSummary:\n   SOURCE:  vendor/shopware/core/Framework/Plugin/PluginManager.php\n   PATCHED: custom/modifications/PluginManager.php\n   OUTPUT:  ./artifacts/patches/shopware/core/1704369600-patch.patch\n\nProceed? (y/N): y\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#patch-anwendung","title":"Patch-Anwendung","text":"<p>Die generierten Patches k\u00f6nnen mit Standard-Tools angewendet werden:</p> <pre><code># Mit Git\ngit apply patches/shopware-plugin-manager.patch\n\n# Mit dem patch Command\npatch -p1 &lt; patches/shopware-plugin-manager.patch\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#fehlerbehandlung","title":"Fehlerbehandlung","text":"<p>Das Tool f\u00fchrt umfangreiche Validierungen durch:</p> <ul> <li>Pfad-Existenz: \u00dcberpr\u00fcft, ob SOURCE und PATCHED existieren</li> <li>Dateityp-Konsistenz: Stellt sicher, dass beide Pfade Dateien oder Verzeichnisse sind</li> <li>Dateierweiterungen: Warnt vor unterschiedlichen Dateierweiterungen</li> <li>Pfad-Konflikte: Verhindert identische SOURCE und PATCHED Pfade</li> <li>Output-Validierung: \u00dcberpr\u00fcft Output-Pfad auf Konflikte</li> <li>Identische Dateien: Erkennt wenn Source und Patched identisch sind</li> <li>Leere Dateien: Verhindert Verarbeitung leerer Source-Dateien</li> <li>Existierende Verzeichnisse: Warnt vor Output-Pfaden die bereits als Verzeichnis existieren</li> </ul>"},{"location":"homebrew/wswcli/patchvendor/#neue-validierungen-v200","title":"Neue Validierungen (v2.0.0)","text":"<pre><code># Beispiele f\u00fcr erweiterte Fehlerbehandlung:\n\n# Identische Dateien werden erkannt\n$ wswcli patchvendor file1.php file1.php output.patch\nError: source and patched files do not have different content\n\n# Leere Dateien werden abgelehnt  \n$ wswcli patchvendor empty.php modified.php output.patch\nError: source file is empty\n\n# Existierende Verzeichnisse als Output werden verhindert\n$ wswcli patchvendor source.php patched.php existing_directory/\nError: output path exists and is a directory: existing_directory/\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#tipps","title":"Tipps","text":"<ol> <li>Backup erstellen: Erstellen Sie immer Backups vor der Anwendung von Patches</li> <li>Testen: Testen Sie Patches in einer Entwicklungsumgebung</li> <li>Versionierung: Versionieren Sie Ihre Patches f\u00fcr bessere Nachverfolgung</li> <li>Dokumentation: Dokumentieren Sie, welche \u00c4nderungen jeder Patch enth\u00e4lt</li> </ol>"},{"location":"homebrew/wswcli/patchvendor/#english","title":"English","text":""},{"location":"homebrew/wswcli/patchvendor/#overview","title":"Overview","text":"<p>The <code>patchvendor</code> command creates unified diff patches for Shopware vendor modifications. This tool is specifically designed for working with Shopware projects and generates patches with proper <code>a/</code> and <code>b/</code> paths based on the vendor/provider structure.</p>"},{"location":"homebrew/wswcli/patchvendor/#usage","title":"Usage","text":"<pre><code>wswcli patchvendor [SOURCE] [PATCHED] [OUTPUT]\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#parameters","title":"Parameters","text":"<ul> <li>SOURCE: Path to the original, unmodified vendor file or directory</li> <li>PATCHED: Path to the modified version containing your changes</li> <li>OUTPUT: Path where the generated patch file should be saved</li> </ul>"},{"location":"homebrew/wswcli/patchvendor/#modes","title":"Modes","text":""},{"location":"homebrew/wswcli/patchvendor/#1-direct-mode","title":"1. Direct Mode","text":"<p>All parameters are provided directly:</p> <pre><code>wswcli patchvendor vendor/shopware/core/Framework/Plugin/PluginManager.php \\\n                   custom/patches/PluginManager.php \\\n                   patches/shopware-plugin-manager.patch\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#2-interactive-mode","title":"2. Interactive Mode","text":"<p>Without parameters, starts interactive mode with helpful prompts:</p> <pre><code>wswcli patchvendor\n</code></pre> <p>The tool guides you through input and provides: - Explanations for each parameter - Examples of typical Shopware paths - Automatic output path suggestions - Confirmation dialog before processing</p>"},{"location":"homebrew/wswcli/patchvendor/#3-partial-parameters","title":"3. Partial Parameters","text":"<p>You can also provide only some parameters:</p> <pre><code># Only SOURCE specified\nwswcli patchvendor vendor/shopware/core/Framework/Plugin/PluginManager.php\n\n# SOURCE and PATCHED specified\nwswcli patchvendor vendor/shopware/core/Framework/Plugin/PluginManager.php \\\n                   custom/patches/PluginManager.php\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#automatic-path-suggestions","title":"Automatic Path Suggestions","text":"<p>When you omit the OUTPUT parameter, the tool automatically generates a structured path:</p> <p>Format: <code>&lt;working-directory&gt;/artifacts/patches/&lt;provider&gt;/&lt;package&gt;/&lt;timestamp&gt;-patch.patch</code></p> <p>Example: - Input: <code>vendor/shopware/core/Framework/Plugin/PluginManager.php</code> - Suggestion: <code>./artifacts/patches/shopware/core/1704369600-patch.patch</code></p>"},{"location":"homebrew/wswcli/patchvendor/#examples","title":"Examples","text":""},{"location":"homebrew/wswcli/patchvendor/#simple-file-modification","title":"Simple File Modification","text":"<pre><code># Original Shopware file\nvendor/shopware/core/Framework/Plugin/PluginManager.php\n\n# Your modified version\ncustom/modifications/PluginManager.php\n\n# Create patch\nwswcli patchvendor vendor/shopware/core/Framework/Plugin/PluginManager.php \\\n                   custom/modifications/PluginManager.php \\\n                   patches/plugin-manager-modifications.patch\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#directory-based-patches","title":"Directory-based Patches","text":"<pre><code># Patch entire directory\nwswcli patchvendor vendor/shopware/administration/Resources/app/administration/src \\\n                   custom/administration-modifications \\\n                   patches/administration-changes.patch\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#interactive-workflow","title":"Interactive Workflow","text":"<pre><code>$ wswcli patchvendor\n\n=== Shopware Vendor Patch Generator ===\nThis tool creates unified diff patches for Shopware vendor modifications.\n\nSOURCE PATH:\n   This is the original, unmodified vendor file or directory.\n   Example: vendor/shopware/core/Framework/Plugin/PluginManager.php\n   Enter source path: vendor/shopware/core/Framework/Plugin/PluginManager.php\n\nPATCHED PATH:\n   This is the modified version of the vendor file or directory.\n   It contains your custom changes that should be preserved.\n   Example: custom/plugins/MyPlugin/vendor-patches/PluginManager.php\n   Enter patched path: custom/modifications/PluginManager.php\n\nOUTPUT PATH:\n   This is where the generated patch file will be saved.\n   The patch can later be applied using 'git apply' or 'patch' command.\n   Suggested: ./artifacts/patches/shopware/core/1704369600-patch.patch\n   Enter output path (or press Enter for suggested): \n\nSummary:\n   SOURCE:  vendor/shopware/core/Framework/Plugin/PluginManager.php\n   PATCHED: custom/modifications/PluginManager.php\n   OUTPUT:  ./artifacts/patches/shopware/core/1704369600-patch.patch\n\nProceed? (y/N): y\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#applying-patches","title":"Applying Patches","text":"<p>Generated patches can be applied using standard tools:</p> <pre><code># With Git\ngit apply patches/shopware-plugin-manager.patch\n\n# With patch command\npatch -p1 &lt; patches/shopware-plugin-manager.patch\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#error-handling","title":"Error Handling","text":"<p>The tool performs comprehensive validations:</p> <ul> <li>Path Existence: Checks if SOURCE and PATCHED exist</li> <li>Type Consistency: Ensures both paths are files or directories</li> <li>File Extensions: Warns about different file extensions</li> <li>Path Conflicts: Prevents identical SOURCE and PATCHED paths</li> <li>Output Validation: Checks output path for conflicts</li> </ul>"},{"location":"homebrew/wswcli/patchvendor/#best-practices","title":"Best Practices","text":"<ol> <li>Create Backups: Always create backups before applying patches</li> <li>Test First: Test patches in a development environment</li> <li>Version Control: Version your patches for better tracking</li> <li>Documentation: Document what changes each patch contains</li> <li>Atomic Changes: Keep patches focused on specific changes</li> <li>Review: Always review generated patches before applying</li> </ol>"},{"location":"homebrew/wswcli/patchvendor/#advanced-usage","title":"Advanced Usage","text":""},{"location":"homebrew/wswcli/patchvendor/#batch-processing","title":"Batch Processing","text":"<pre><code># Process multiple files\nfor file in vendor/shopware/core/Framework/Plugin/*.php; do\n    if [ -f \"custom/modifications/$(basename \"$file\")\" ]; then\n        wswcli patchvendor \"$file\" \\\n                          \"custom/modifications/$(basename \"$file\")\" \\\n                          \"patches/$(basename \"$file\" .php).patch\"\n    fi\ndone\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#integration-with-cicd","title":"Integration with CI/CD","text":"<pre><code># Generate patches in CI pipeline\nwswcli patchvendor vendor/shopware/core \\\n                   custom/shopware-modifications \\\n                   artifacts/shopware-core-modifications.patch\n\n# Validate patches can be applied\ngit apply --check artifacts/shopware-core-modifications.patch\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#troubleshooting","title":"Troubleshooting","text":""},{"location":"homebrew/wswcli/patchvendor/#common-issues","title":"Common Issues","text":"<ol> <li> <p>\"source path does not exist\"</p> <ul> <li>Verify the source file/directory exists</li> <li>Check for typos in the path</li> </ul> </li> <li> <p>\"different extensions\"</p> <ul> <li>Ensure source and patched files have the same extension</li> <li>Use <code>--force</code> flag if intentional (future feature)</li> </ul> </li> <li> <p>\"output path exists and is a directory\"</p> <ul> <li>Specify a file path for output, not a directory</li> <li>Use a <code>.patch</code> extension for clarity</li> </ul> </li> <li> <p>Empty patches</p> <ul> <li>Verify the files actually differ</li> <li>Check file permissions and readability</li> </ul> </li> </ol>"},{"location":"homebrew/wswcli/patchvendor/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable verbose output (future feature)\nwswcli patchvendor --verbose source.php patched.php output.patch\n</code></pre>"},{"location":"homebrew/wswcli/patchvendor/#integration-examples","title":"Integration Examples","text":""},{"location":"homebrew/wswcli/patchvendor/#with-shopware-plugin-development","title":"With Shopware Plugin Development","text":"<pre><code># Create patches for plugin-specific vendor modifications\nwswcli patchvendor vendor/shopware/core/Framework/Plugin/PluginManager.php \\\n                   plugins/MyPlugin/patches/PluginManager.php \\\n                   plugins/MyPlugin/patches/core-plugin-manager.patch\n</code></pre> <p>This documentation provides comprehensive guidance for using the <code>patchvendor</code> command effectively in Shopware development workflows.</p>"},{"location":"projects/docker-compose-helper/","title":"Docker Compose Helper","text":""},{"location":"projects/docker-compose-helper/#docker-compose-helper-info","title":"Docker Compose Helper Info","text":"<p>Supported Docker Compose Scripts</p> <ul> <li>mysql</li> <li>keycloak</li> </ul> <p>More Coming Soon</p>"},{"location":"projects/docker-compose-helper/#run-docker-compose-helper-script","title":"Run Docker Compose Helper Script","text":"<pre><code>curl -sS https://cdn.wimwenigerkind.com/cdn/libraries/scripts/docker-compose-helper/script.sh -o script.sh; \\\nbash script.sh\n</code></pre>"}]}